
CAN_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063ec  080063ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f4  080063f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000390  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173dd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aa4  00000000  00000000  00037485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  0003b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250ea  00000000  00000000  0003c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e61  00000000  00000000  0006120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfffd  00000000  00000000  0007606b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156068  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000553c  00000000  00000000  001560bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062f0 	.word	0x080062f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080062f0 	.word	0x080062f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <startup_blink>:
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>


void startup_blink(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	int i = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	while(i<20){
 80005a2:	e010      	b.n	80005c6 <startup_blink+0x2e>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80005a4:	2101      	movs	r1, #1
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <startup_blink+0x40>)
 80005a8:	f002 f983 	bl	80028b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(30); //delay 30ms
 80005ac:	201e      	movs	r0, #30
 80005ae:	f000 fe77 	bl	80012a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <startup_blink+0x40>)
 80005b6:	f002 f97c 	bl	80028b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(30); //delay 30ms
 80005ba:	201e      	movs	r0, #30
 80005bc:	f000 fe70 	bl	80012a0 <HAL_Delay>
	  i++;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(i<20){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b13      	cmp	r3, #19
 80005ca:	ddeb      	ble.n	80005a4 <startup_blink+0xc>
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020400 	.word	0x40020400

080005dc <send_UART>:
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
		HAL_Delay(100); //delay 100ms
	}
}

void send_UART(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
	uint8_t Test[] = "11\r\n";//"Hello World !!!\r\n"; //Data to send
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <send_UART+0x48>)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ea:	6018      	str	r0, [r3, #0]
 80005ec:	3304      	adds	r3, #4
 80005ee:	7019      	strb	r1, [r3, #0]
	uint32_t Error = HAL_UART_Transmit(&huart7,Test,sizeof(Test),12);// Sending in normal mode
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	230c      	movs	r3, #12
 80005f4:	2205      	movs	r2, #5
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <send_UART+0x4c>)
 80005f8:	f003 fb4b 	bl	8003c92 <HAL_UART_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60fb      	str	r3, [r7, #12]
	if (Error != HAL_OK){
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <send_UART+0x32>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000606:	2101      	movs	r1, #1
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <send_UART+0x50>)
 800060a:	f002 f952 	bl	80028b2 <HAL_GPIO_TogglePin>

	}
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <send_UART+0x50>)
 8000612:	f002 f94e 	bl	80028b2 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 fe42 	bl	80012a0 <HAL_Delay>

}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	08006308 	.word	0x08006308
 8000628:	20000158 	.word	0x20000158
 800062c:	40020400 	.word	0x40020400

08000630 <state_machine>:


void state_machine(){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	    PATHFOLLOWER,
	    NEARFIELD,
		DOCKED,
		EMERGENCYSTOP,
	} state;
	state = STARTUP;
 8000636:	2300      	movs	r3, #0
 8000638:	71fb      	strb	r3, [r7, #7]
	switch(state) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d811      	bhi.n	8000664 <state_machine+0x34>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <state_machine+0x18>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000663 	.word	0x08000663
 8000650:	08000663 	.word	0x08000663
 8000654:	08000663 	.word	0x08000663
 8000658:	08000663 	.word	0x08000663
		case STARTUP:
			startup_blink();
 800065c:	f7ff ff9c 	bl	8000598 <startup_blink>
		break;
 8000660:	e000      	b.n	8000664 <state_machine+0x34>
		case PATHFOLLOWER:

		break;
 8000662:	bf00      	nop
		case EMERGENCYSTOP:

		break;
	}

}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fdd4 	bl	800121c <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();
 8000674:	f005 fdc2 	bl	80061fc <initialise_monitor_handles>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f854 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f9e6 	bl	8000a4c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000680:	f000 f8c0 	bl	8000804 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000684:	f000 f910 	bl	80008a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000688:	f000 f94e 	bl	8000928 <MX_I2C2_Init>
  MX_DMA_Init();
 800068c:	f000 f9b6 	bl	80009fc <MX_DMA_Init>
  MX_UART7_Init();
 8000690:	f000 f98a 	bl	80009a8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  //if (HAL_CAN_Start(&hcan1) != HAL_OK){
	//  Error_Handler();
  //}
  __HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <main+0xa0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68da      	ldr	r2, [r3, #12]
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <main+0xa0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f042 0210 	orr.w	r2, r2, #16
 80006a2:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart7, rxbuff, 20);
 80006a4:	2214      	movs	r2, #20
 80006a6:	491a      	ldr	r1, [pc, #104]	; (8000710 <main+0xa4>)
 80006a8:	4818      	ldr	r0, [pc, #96]	; (800070c <main+0xa0>)
 80006aa:	f003 fb84 	bl	8003db6 <HAL_UART_Receive_DMA>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006ae:	2102      	movs	r1, #2
 80006b0:	4818      	ldr	r0, [pc, #96]	; (8000714 <main+0xa8>)
 80006b2:	f000 fff5 	bl	80016a0 <HAL_CAN_ActivateNotification>


  TxData[0] = 5;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <main+0xac>)
 80006b8:	2205      	movs	r2, #5
 80006ba:	701a      	strb	r2, [r3, #0]
  TxData[1] = 1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <main+0xac>)
 80006be:	2201      	movs	r2, #1
 80006c0:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0xFF;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <main+0xac>)
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x0;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <main+0xac>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0xFF;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <main+0xac>)
 80006d0:	22ff      	movs	r2, #255	; 0xff
 80006d2:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x0;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <main+0xac>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0xFF;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <main+0xac>)
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x0;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <main+0xac>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	71da      	strb	r2, [r3, #7]

  Identifier = 0x101;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0xb0>)
 80006e8:	f240 1201 	movw	r2, #257	; 0x101
 80006ec:	601a      	str	r2, [r3, #0]

  state_machine();
 80006ee:	f7ff ff9f 	bl	8000630 <state_machine>
  /* USER CODE BEGIN WHILE */
  int loop;
  while (1)
  {
	//printf("W \r\n");
	send_UART();
 80006f2:	f7ff ff73 	bl	80005dc <send_UART>
	HAL_UART_Receive_DMA(&huart7, rxbuff, 20);
 80006f6:	2214      	movs	r2, #20
 80006f8:	4905      	ldr	r1, [pc, #20]	; (8000710 <main+0xa4>)
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <main+0xa0>)
 80006fc:	f003 fb5b 	bl	8003db6 <HAL_UART_Receive_DMA>
	//for(loop = 0; loop < 20; loop++)
	printf("%s\n ", rxbuff);
 8000700:	4903      	ldr	r1, [pc, #12]	; (8000710 <main+0xa4>)
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <main+0xb4>)
 8000704:	f004 fbf2 	bl	8004eec <iprintf>
	send_UART();
 8000708:	e7f3      	b.n	80006f2 <main+0x86>
 800070a:	bf00      	nop
 800070c:	20000158 	.word	0x20000158
 8000710:	2000037c 	.word	0x2000037c
 8000714:	20000244 	.word	0x20000244
 8000718:	20000374 	.word	0x20000374
 800071c:	20000094 	.word	0x20000094
 8000720:	08006310 	.word	0x08006310

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fbd2 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <SystemClock_Config+0xd8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <SystemClock_Config+0xd8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xd8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xdc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a24      	ldr	r2, [pc, #144]	; (8000800 <SystemClock_Config+0xdc>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xdc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000798:	23b4      	movs	r3, #180	; 0xb4
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a0:	2307      	movs	r3, #7
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fad1 	bl	8002d50 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b4:	f000 fa36 	bl	8000c24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b8:	f002 fa7a 	bl	8002cb0 <HAL_PWREx_EnableOverDrive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007c2:	f000 fa2f 	bl	8000c24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fd2b 	bl	8003240 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007f0:	f000 fa18 	bl	8000c24 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_CAN1_Init+0x9c>)
 800080c:	4a25      	ldr	r2, [pc, #148]	; (80008a4 <MX_CAN1_Init+0xa0>)
 800080e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000812:	2212      	movs	r2, #18
 8000814:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_CAN1_Init+0x9c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000824:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000828:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_CAN1_Init+0x9c>)
 800082c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000830:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_CAN1_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000846:	2200      	movs	r2, #0
 8000848:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_CAN1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000858:	f000 fd46 	bl	80012e8 <HAL_CAN_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000862:	f000 f9df 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0<<5;
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0<<5;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 800088a:	2314      	movs	r3, #20
 800088c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_CAN1_Init+0x9c>)
 8000894:	f000 fe24 	bl	80014e0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000244 	.word	0x20000244
 80008a4:	40006400 	.word	0x40006400

080008a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C1_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C1_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_I2C1_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C1_Init+0x74>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_I2C1_Init+0x74>)
 80008e6:	f002 f823 	bl	8002930 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f998 	bl	8000c24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C1_Init+0x74>)
 80008f8:	f002 f95e 	bl	8002bb8 <HAL_I2CEx_ConfigAnalogFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 f98f 	bl	8000c24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_I2C1_Init+0x74>)
 800090a:	f002 f991 	bl	8002c30 <HAL_I2CEx_ConfigDigitalFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 f986 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000019c 	.word	0x2000019c
 8000920:	40005400 	.word	0x40005400
 8000924:	000186a0 	.word	0x000186a0

08000928 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_I2C2_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_I2C2_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_I2C2_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_I2C2_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_I2C2_Init+0x74>)
 8000946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_I2C2_Init+0x74>)
 8000966:	f001 ffe3 	bl	8002930 <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f958 	bl	8000c24 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4809      	ldr	r0, [pc, #36]	; (800099c <MX_I2C2_Init+0x74>)
 8000978:	f002 f91e 	bl	8002bb8 <HAL_I2CEx_ConfigAnalogFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000982:	f000 f94f 	bl	8000c24 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_I2C2_Init+0x74>)
 800098a:	f002 f951 	bl	8002c30 <HAL_I2CEx_ConfigDigitalFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f946 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001f0 	.word	0x200001f0
 80009a0:	40005800 	.word	0x40005800
 80009a4:	000186a0 	.word	0x000186a0

080009a8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_UART7_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_UART7_Init+0x4c>)
 80009e0:	f003 f90a 	bl	8003bf8 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f91b 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000158 	.word	0x20000158
 80009f8:	40007800 	.word	0x40007800

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_DMA_Init+0x4c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <MX_DMA_Init+0x4c>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_DMA_Init+0x4c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	200c      	movs	r0, #12
 8000a24:	f001 f954 	bl	8001cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a28:	200c      	movs	r0, #12
 8000a2a:	f001 f96d 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	200e      	movs	r0, #14
 8000a34:	f001 f94c 	bl	8001cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a38:	200e      	movs	r0, #14
 8000a3a:	f001 f965 	bl	8001d08 <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a3e      	ldr	r2, [pc, #248]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b38      	ldr	r3, [pc, #224]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a37      	ldr	r2, [pc, #220]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000a88:	f043 0320 	orr.w	r3, r3, #32
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_GPIO_Init+0x118>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2181      	movs	r1, #129	; 0x81
 8000b0e:	4816      	ldr	r0, [pc, #88]	; (8000b68 <MX_GPIO_Init+0x11c>)
 8000b10:	f001 feb6 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000b2c:	f001 fcfc 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000b30:	2381      	movs	r3, #129	; 0x81
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_GPIO_Init+0x11c>)
 8000b48:	f001 fcee 	bl	8002528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f001 f8bd 	bl	8001cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f001 f8d6 	bl	8001d08 <HAL_NVIC_EnableIRQ>

}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020800 	.word	0x40020800

08000b70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  	//HAL_UART_Receive_IT(&huart7, &recieved_bit,1000);
  	//recieved_msg[rx_index++] = recieved_bit;
	_TC_Count++;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <HAL_UART_RxCpltCallback+0x28>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_UART_RxCpltCallback+0x28>)
 8000b82:	801a      	strh	r2, [r3, #0]
	rcvFlag=1;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_UART_RxCpltCallback+0x2c>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]

  }
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	20000098 	.word	0x20000098

08000ba0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	_HT_Count++;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_UART_RxHalfCpltCallback+0x28>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_UART_RxHalfCpltCallback+0x28>)
 8000bb2:	801a      	strh	r2, [r3, #0]
	rcvFlag = 1;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_UART_RxHalfCpltCallback+0x2c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000009a 	.word	0x2000009a
 8000bcc:	20000098 	.word	0x20000098

08000bd0 <UART_IDLECallback>:
void UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	_IDLE_Count++;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <UART_IDLECallback+0x28>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <UART_IDLECallback+0x28>)
 8000be2:	801a      	strh	r2, [r3, #0]
	rcvFlag = 1;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <UART_IDLECallback+0x2c>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000009e 	.word	0x2000009e
 8000bfc:	20000098 	.word	0x20000098

08000c00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c12:	f000 fb25 	bl	8001260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40002000 	.word	0x40002000

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_CAN_MspInit+0x94>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d133      	bne.n	8000d0a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_CAN_MspInit+0x98>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <HAL_CAN_MspInit+0x98>)
 8000cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_CAN_MspInit+0x98>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_CAN_MspInit+0x98>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_CAN_MspInit+0x98>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_CAN_MspInit+0x98>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cea:	2309      	movs	r3, #9
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <HAL_CAN_MspInit+0x9c>)
 8000cf6:	f001 fc17 	bl	8002528 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2014      	movs	r0, #20
 8000d00:	f000 ffe6 	bl	8001cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d04:	2014      	movs	r0, #20
 8000d06:	f000 ffff 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40006400 	.word	0x40006400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <HAL_I2C_MspInit+0xe8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12d      	bne.n	8000d9e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a30      	ldr	r2, [pc, #192]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d64:	2312      	movs	r3, #18
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d70:	2304      	movs	r3, #4
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4825      	ldr	r0, [pc, #148]	; (8000e10 <HAL_I2C_MspInit+0xf0>)
 8000d7c:	f001 fbd4 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d9c:	e030      	b.n	8000e00 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_I2C_MspInit+0xf4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d12b      	bne.n	8000e00 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <HAL_I2C_MspInit+0xf8>)
 8000de0:	f001 fba2 	bl	8002528 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000dee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_I2C_MspInit+0xec>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40005800 	.word	0x40005800
 8000e18:	40021400 	.word	0x40021400

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a4c      	ldr	r2, [pc, #304]	; (8000f6c <HAL_UART_MspInit+0x150>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	f040 8091 	bne.w	8000f62 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <HAL_UART_MspInit+0x154>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_UART_MspInit+0x154>)
 8000e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <HAL_UART_MspInit+0x154>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b43      	ldr	r3, [pc, #268]	; (8000f70 <HAL_UART_MspInit+0x154>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <HAL_UART_MspInit+0x154>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_UART_MspInit+0x154>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4837      	ldr	r0, [pc, #220]	; (8000f74 <HAL_UART_MspInit+0x158>)
 8000e96:	f001 fb47 	bl	8002528 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000e9c:	4a37      	ldr	r2, [pc, #220]	; (8000f7c <HAL_UART_MspInit+0x160>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000ea2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8000eda:	4827      	ldr	r0, [pc, #156]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000edc:	f000 ff22 	bl	8001d24 <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ee6:	f7ff fe9d 	bl	8000c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_UART_MspInit+0x15c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000efa:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000efe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f06:	2240      	movs	r2, #64	; 0x40
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f16:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8000f36:	4812      	ldr	r0, [pc, #72]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f38:	f000 fef4 	bl	8001d24 <HAL_DMA_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000f42:	f7ff fe6f 	bl	8000c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2052      	movs	r0, #82	; 0x52
 8000f58:	f000 feba 	bl	8001cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000f5c:	2052      	movs	r0, #82	; 0x52
 8000f5e:	f000 fed3 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40007800 	.word	0x40007800
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	20000314 	.word	0x20000314
 8000f7c:	40026058 	.word	0x40026058
 8000f80:	200002b4 	.word	0x200002b4
 8000f84:	40026028 	.word	0x40026028

08000f88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	202d      	movs	r0, #45	; 0x2d
 8000f9e:	f000 fe97 	bl	8001cd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000fa2:	202d      	movs	r0, #45	; 0x2d
 8000fa4:	f000 feb0 	bl	8001d08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_InitTick+0xa4>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_InitTick+0xa4>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_InitTick+0xa4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fb32 	bl	8003638 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fd4:	f002 fb08 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_InitTick+0xa8>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9b      	lsrs	r3, r3, #18
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_InitTick+0xac>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_InitTick+0xb0>)
 8000ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_InitTick+0xac>)
 8000ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_InitTick+0xac>)
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_InitTick+0xac>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_InitTick+0xac>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_InitTick+0xac>)
 800100e:	f002 fb45 	bl	800369c <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_InitTick+0xac>)
 800101a:	f002 fb99 	bl	8003750 <HAL_TIM_Base_Start_IT>
 800101e:	4603      	mov	r3, r0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	431bde83 	.word	0x431bde83
 8001034:	200003ac 	.word	0x200003ac
 8001038:	40002000 	.word	0x40002000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Stream1_IRQHandler+0x10>)
 800109a:	f000 ffdb 	bl	8002054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002b4 	.word	0x200002b4

080010a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Stream3_IRQHandler+0x10>)
 80010ae:	f000 ffd1 	bl	8002054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000314 	.word	0x20000314

080010bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <CAN1_RX0_IRQHandler+0x10>)
 80010c2:	f000 fb13 	bl	80016ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000244 	.word	0x20000244

080010d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010d8:	f001 fc06 	bl	80028e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010e6:	f002 fba3 	bl	8003830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200003ac 	.word	0x200003ac

080010f4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart7, UART_FLAG_IDLE) != RESET)
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <UART7_IRQHandler+0x40>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b10      	cmp	r3, #16
 8001106:	d10d      	bne.n	8001124 <UART7_IRQHandler+0x30>
	  {
		  __HAL_UART_CLEAR_IDLEFLAG(&huart7);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <UART7_IRQHandler+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <UART7_IRQHandler+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
		  UART_IDLECallback(&huart7);
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <UART7_IRQHandler+0x40>)
 8001120:	f7ff fd56 	bl	8000bd0 <UART_IDLECallback>
	  }

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <UART7_IRQHandler+0x40>)
 8001126:	f002 fe77 	bl	8003e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000158 	.word	0x20000158

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f003 fe8e 	bl	8004e88 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20030000 	.word	0x20030000
 8001198:	00000400 	.word	0x00000400
 800119c:	200000a0 	.word	0x200000a0
 80011a0:	20000408 	.word	0x20000408

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 fe4d 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fa37 	bl	800066c <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001200:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800120c:	080063fc 	.word	0x080063fc
  ldr r2, =_sbss
 8001210:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001214:	20000408 	.word	0x20000408

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fd38 	bl	8001cba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f7ff fe9c 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fcee 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	200003f4 	.word	0x200003f4

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200003f4 	.word	0x200003f4

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0ed      	b.n	80014d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fcba 	bl	8000c80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff ffb4 	bl	8001288 <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001322:	e012      	b.n	800134a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001324:	f7ff ffb0 	bl	8001288 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b0a      	cmp	r3, #10
 8001330:	d90b      	bls.n	800134a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2205      	movs	r2, #5
 8001342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0c5      	b.n	80014d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0e5      	beq.n	8001324 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0202 	bic.w	r2, r2, #2
 8001366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001368:	f7ff ff8e 	bl	8001288 <HAL_GetTick>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800136e:	e012      	b.n	8001396 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001370:	f7ff ff8a 	bl	8001288 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b0a      	cmp	r3, #10
 800137c:	d90b      	bls.n	8001396 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2205      	movs	r2, #5
 800138e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e09f      	b.n	80014d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e5      	bne.n	8001370 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d108      	bne.n	80013be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e007      	b.n	80013ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7e5b      	ldrb	r3, [r3, #25]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e007      	b.n	80013f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e9b      	ldrb	r3, [r3, #26]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0220 	orr.w	r2, r2, #32
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e007      	b.n	8001422 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0220 	bic.w	r2, r2, #32
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7edb      	ldrb	r3, [r3, #27]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0210 	bic.w	r2, r2, #16
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e007      	b.n	800144c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0210 	orr.w	r2, r2, #16
 800144a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7f1b      	ldrb	r3, [r3, #28]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	e007      	b.n	8001476 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0208 	bic.w	r2, r2, #8
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7f5b      	ldrb	r3, [r3, #29]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e007      	b.n	80014a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	ea42 0103 	orr.w	r1, r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d003      	beq.n	8001506 <HAL_CAN_ConfigFilter+0x26>
 80014fe:	7cfb      	ldrb	r3, [r7, #19]
 8001500:	2b02      	cmp	r3, #2
 8001502:	f040 80be 	bne.w	8001682 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_CAN_ConfigFilter+0x1bc>)
 8001508:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001520:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	431a      	orrs	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2201      	movs	r2, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d123      	bne.n	80015b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800158a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3248      	adds	r2, #72	; 0x48
 8001590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	3348      	adds	r3, #72	; 0x48
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d122      	bne.n	80015fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3248      	adds	r2, #72	; 0x48
 80015de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001618:	e007      	b.n	800162a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	431a      	orrs	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001644:	e007      	b.n	8001656 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	431a      	orrs	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	431a      	orrs	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001674:	f023 0201 	bic.w	r2, r3, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e006      	b.n	8001690 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40006400 	.word	0x40006400

080016a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d002      	beq.n	80016be <HAL_CAN_ActivateNotification+0x1e>
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d109      	bne.n	80016d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6959      	ldr	r1, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e006      	b.n	80016e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
  }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d07c      	beq.n	800182c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f983 	bl	8001a5a <HAL_CAN_TxMailbox0CompleteCallback>
 8001754:	e016      	b.n	8001784 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e00c      	b.n	8001784 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
 800177c:	e002      	b.n	8001784 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f989 	bl	8001a96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d024      	beq.n	80017d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001796:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f963 	bl	8001a6e <HAL_CAN_TxMailbox1CompleteCallback>
 80017a8:	e016      	b.n	80017d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e00c      	b.n	80017d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	e002      	b.n	80017d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f969 	bl	8001aaa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d024      	beq.n	800182c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f943 	bl	8001a82 <HAL_CAN_TxMailbox2CompleteCallback>
 80017fc:	e016      	b.n	800182c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
 8001810:	e00c      	b.n	800182c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	e002      	b.n	800182c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f949 	bl	8001abe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2208      	movs	r2, #8
 800186a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f93a 	bl	8001ae6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f921 	bl	8001ad2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2210      	movs	r2, #16
 80018b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2208      	movs	r2, #8
 80018ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f91c 	bl	8001b0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f903 	bl	8001afa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2210      	movs	r2, #16
 800190e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f906 	bl	8001b22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2208      	movs	r2, #8
 8001930:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f8ff 	bl	8001b36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d07b      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d072      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d043      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03e      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ba:	2b60      	cmp	r3, #96	; 0x60
 80019bc:	d02b      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x32a>
 80019be:	2b60      	cmp	r3, #96	; 0x60
 80019c0:	d82e      	bhi.n	8001a20 <HAL_CAN_IRQHandler+0x334>
 80019c2:	2b50      	cmp	r3, #80	; 0x50
 80019c4:	d022      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x320>
 80019c6:	2b50      	cmp	r3, #80	; 0x50
 80019c8:	d82a      	bhi.n	8001a20 <HAL_CAN_IRQHandler+0x334>
 80019ca:	2b40      	cmp	r3, #64	; 0x40
 80019cc:	d019      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x316>
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	d826      	bhi.n	8001a20 <HAL_CAN_IRQHandler+0x334>
 80019d2:	2b30      	cmp	r3, #48	; 0x30
 80019d4:	d010      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x30c>
 80019d6:	2b30      	cmp	r3, #48	; 0x30
 80019d8:	d822      	bhi.n	8001a20 <HAL_CAN_IRQHandler+0x334>
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d002      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x2f8>
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d005      	beq.n	80019ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019e2:	e01d      	b.n	8001a20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ec:	e019      	b.n	8001a22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019f6:	e014      	b.n	8001a22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a00:	e00f      	b.n	8001a22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a0a:	e00a      	b.n	8001a22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a14:	e005      	b.n	8001a22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a1e:	e000      	b.n	8001a22 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2204      	movs	r2, #4
 8001a38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f87c 	bl	8001b4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db0b      	blt.n	8001bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4907      	ldr	r1, [pc, #28]	; (8001bfc <__NVIC_EnableIRQ+0x38>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2001      	movs	r0, #1
 8001be6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff4c 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce2:	f7ff ff61 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	6978      	ldr	r0, [r7, #20]
 8001cee:	f7ff ffb1 	bl	8001c54 <NVIC_EncodePriority>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff80 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff54 	bl	8001bc4 <__NVIC_EnableIRQ>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff faaa 	bl	8001288 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e099      	b.n	8001e74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d60:	e00f      	b.n	8001d82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d62:	f7ff fa91 	bl	8001288 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d908      	bls.n	8001d82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e078      	b.n	8001e74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e8      	bne.n	8001d62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_DMA_Init+0x158>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d107      	bne.n	8001dec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4313      	orrs	r3, r2
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f023 0307 	bic.w	r3, r3, #7
 8001e02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d117      	bne.n	8001e46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fb01 	bl	8002430 <DMA_CheckFifoParam>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e42:	2301      	movs	r3, #1
 8001e44:	e016      	b.n	8001e74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fab8 	bl	80023c4 <DMA_CalcBaseAndBitshift>
 8001e54:	4603      	mov	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	223f      	movs	r2, #63	; 0x3f
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f010803f 	.word	0xf010803f

08001e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Start_IT+0x26>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e040      	b.n	8001f28 <HAL_DMA_Start_IT+0xa8>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d12f      	bne.n	8001f1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fa4a 	bl	8002368 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0216 	orr.w	r2, r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0208 	orr.w	r2, r2, #8
 8001f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e005      	b.n	8001f26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3e:	f7ff f9a3 	bl	8001288 <HAL_GetTick>
 8001f42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e052      	b.n	8002008 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0216 	bic.w	r2, r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <HAL_DMA_Abort+0x62>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	e013      	b.n	8001fdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb4:	f7ff f968 	bl	8001288 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d90c      	bls.n	8001fdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e015      	b.n	8002008 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e4      	bne.n	8001fb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	223f      	movs	r2, #63	; 0x3f
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d004      	beq.n	800202e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00c      	b.n	8002048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002060:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_DMA_IRQHandler+0x258>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a92      	ldr	r2, [pc, #584]	; (80022b0 <HAL_DMA_IRQHandler+0x25c>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a9b      	lsrs	r3, r3, #10
 800206c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	2208      	movs	r2, #8
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01a      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0204 	bic.w	r2, r2, #4
 80020a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2208      	movs	r2, #8
 80020ae:	409a      	lsls	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2201      	movs	r2, #1
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0202 	orr.w	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2204      	movs	r2, #4
 80020fc:	409a      	lsls	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	2204      	movs	r2, #4
 800211a:	409a      	lsls	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	2210      	movs	r2, #16
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d043      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03c      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2210      	movs	r2, #16
 8002150:	409a      	lsls	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d018      	beq.n	8002196 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d024      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
 8002182:	e01f      	b.n	80021c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
 8002194:	e016      	b.n	80021c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d107      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0208 	bic.w	r2, r2, #8
 80021b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	2220      	movs	r2, #32
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 808e 	beq.w	80022f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8086 	beq.w	80022f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2220      	movs	r2, #32
 80021ec:	409a      	lsls	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d136      	bne.n	800226c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0216 	bic.w	r2, r2, #22
 800220c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800221c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d103      	bne.n	800222e <HAL_DMA_IRQHandler+0x1da>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0208 	bic.w	r2, r2, #8
 800223c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	223f      	movs	r2, #63	; 0x3f
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	2b00      	cmp	r3, #0
 8002260:	d07d      	beq.n	800235e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
        }
        return;
 800226a:	e078      	b.n	800235e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	2b00      	cmp	r3, #0
 800228e:	d030      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	4798      	blx	r3
 8002298:	e02b      	b.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d027      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e022      	b.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
 80022ac:	20000000 	.word	0x20000000
 80022b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0210 	bic.w	r2, r2, #16
 80022d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d032      	beq.n	8002360 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d022      	beq.n	800234c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3301      	adds	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	429a      	cmp	r2, r3
 8002328:	d307      	bcc.n	800233a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f2      	bne.n	800231e <HAL_DMA_IRQHandler+0x2ca>
 8002338:	e000      	b.n	800233c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800233a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e000      	b.n	8002360 <HAL_DMA_IRQHandler+0x30c>
        return;
 800235e:	bf00      	nop
    }
  }
}
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002384:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d108      	bne.n	80023a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023a6:	e007      	b.n	80023b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3b10      	subs	r3, #16
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <DMA_CalcBaseAndBitshift+0x64>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <DMA_CalcBaseAndBitshift+0x68>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d909      	bls.n	8002406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	1d1a      	adds	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	; 0x58
 8002404:	e007      	b.n	8002416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	aaaaaaab 	.word	0xaaaaaaab
 800242c:	08006330 	.word	0x08006330

08002430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0x5a>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d856      	bhi.n	80024fe <DMA_CheckFifoParam+0xce>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <DMA_CheckFifoParam+0x28>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	08002469 	.word	0x08002469
 800245c:	0800247b 	.word	0x0800247b
 8002460:	08002469 	.word	0x08002469
 8002464:	080024ff 	.word	0x080024ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d046      	beq.n	8002502 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e043      	b.n	8002502 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002482:	d140      	bne.n	8002506 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e03d      	b.n	8002506 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002492:	d121      	bne.n	80024d8 <DMA_CheckFifoParam+0xa8>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d837      	bhi.n	800250a <DMA_CheckFifoParam+0xda>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <DMA_CheckFifoParam+0x70>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024b7 	.word	0x080024b7
 80024a8:	080024b1 	.word	0x080024b1
 80024ac:	080024c9 	.word	0x080024c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      break;
 80024b4:	e030      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d025      	beq.n	800250e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c6:	e022      	b.n	800250e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024d0:	d11f      	bne.n	8002512 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024d6:	e01c      	b.n	8002512 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d903      	bls.n	80024e6 <DMA_CheckFifoParam+0xb6>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e4:	e018      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ea:	e015      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00e      	beq.n	8002516 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e00b      	b.n	8002516 <DMA_CheckFifoParam+0xe6>
      break;
 80024fe:	bf00      	nop
 8002500:	e00a      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
 8002504:	e008      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e006      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e004      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e002      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;   
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
    }
  } 
  
  return status; 
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e177      	b.n	8002834 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 8166 	bne.w	800282e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d005      	beq.n	800257a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	2b02      	cmp	r3, #2
 8002578:	d130      	bne.n	80025dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 0201 	and.w	r2, r3, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d017      	beq.n	8002618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80c0 	beq.w	800282e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_GPIO_Init+0x324>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_GPIO_Init+0x324>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_GPIO_Init+0x324>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a61      	ldr	r2, [pc, #388]	; (8002850 <HAL_GPIO_Init+0x328>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_GPIO_Init+0x32c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d037      	beq.n	8002766 <HAL_GPIO_Init+0x23e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_GPIO_Init+0x330>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d031      	beq.n	8002762 <HAL_GPIO_Init+0x23a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a56      	ldr	r2, [pc, #344]	; (800285c <HAL_GPIO_Init+0x334>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_GPIO_Init+0x236>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a55      	ldr	r2, [pc, #340]	; (8002860 <HAL_GPIO_Init+0x338>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x232>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_GPIO_Init+0x33c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x22e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a53      	ldr	r2, [pc, #332]	; (8002868 <HAL_GPIO_Init+0x340>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x22a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_GPIO_Init+0x344>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x226>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_GPIO_Init+0x348>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x222>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a50      	ldr	r2, [pc, #320]	; (8002874 <HAL_GPIO_Init+0x34c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x21e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4f      	ldr	r2, [pc, #316]	; (8002878 <HAL_GPIO_Init+0x350>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x21a>
 800273e:	2309      	movs	r3, #9
 8002740:	e012      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002742:	230a      	movs	r3, #10
 8002744:	e010      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002746:	2308      	movs	r3, #8
 8002748:	e00e      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800274a:	2307      	movs	r3, #7
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800274e:	2306      	movs	r3, #6
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x240>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x240>
 8002766:	2300      	movs	r3, #0
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002778:	4935      	ldr	r1, [pc, #212]	; (8002850 <HAL_GPIO_Init+0x328>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_GPIO_Init+0x354>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027aa:	4a34      	ldr	r2, [pc, #208]	; (800287c <HAL_GPIO_Init+0x354>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_GPIO_Init+0x354>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d4:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_GPIO_Init+0x354>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_GPIO_Init+0x354>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_GPIO_Init+0x354>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_GPIO_Init+0x354>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <HAL_GPIO_Init+0x354>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	f67f ae84 	bls.w	8002544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40013800 	.word	0x40013800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800
 8002870:	40021c00 	.word	0x40021c00
 8002874:	40022000 	.word	0x40022000
 8002878:	40022400 	.word	0x40022400
 800287c:	40013c00 	.word	0x40013c00

08002880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	4613      	mov	r3, r2
 800288e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800289c:	e003      	b.n	80028a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	041a      	lsls	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c4:	887a      	ldrh	r2, [r7, #2]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	041a      	lsls	r2, r3, #16
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	400b      	ands	r3, r1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f806 	bl	8002918 <HAL_GPIO_EXTI_Callback>
  }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e12b      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f9e2 	bl	8000d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002994:	f000 fe28 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d807      	bhi.n	80029b4 <HAL_I2C_Init+0x84>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_I2C_Init+0x278>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e006      	b.n	80029c2 <HAL_I2C_Init+0x92>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	; (8002bac <HAL_I2C_Init+0x27c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e7      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_I2C_Init+0x280>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <HAL_I2C_Init+0xd4>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e009      	b.n	8002a18 <HAL_I2C_Init+0xe8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_I2C_Init+0x284>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	495c      	ldr	r1, [pc, #368]	; (8002ba4 <HAL_I2C_Init+0x274>)
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d819      	bhi.n	8002a6c <HAL_I2C_Init+0x13c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e59      	subs	r1, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_I2C_Init+0x138>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	e051      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e04f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_I2C_Init+0x168>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e012      	b.n	8002abe <HAL_I2C_Init+0x18e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x196>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_I2C_Init+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e58      	subs	r0, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6809      	ldr	r1, [r1, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6911      	ldr	r1, [r2, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	000186a0 	.word	0x000186a0
 8002ba8:	001e847f 	.word	0x001e847f
 8002bac:	003d08ff 	.word	0x003d08ff
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d129      	bne.n	8002c22 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	; 0x24
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0210 	bic.w	r2, r2, #16
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
  }
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d12a      	bne.n	8002ca0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2224      	movs	r2, #36	; 0x24
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	f023 030f 	bic.w	r3, r3, #15
 8002c70:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	89fb      	ldrh	r3, [r7, #14]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	89fa      	ldrh	r2, [r7, #14]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_PWREx_EnableOverDrive+0x94>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cdc:	f7fe fad4 	bl	8001288 <HAL_GetTick>
 8002ce0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ce2:	e009      	b.n	8002cf8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ce4:	f7fe fad0 	bl	8001288 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cf2:	d901      	bls.n	8002cf8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e01f      	b.n	8002d38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d1ee      	bne.n	8002ce4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0c:	f7fe fabc 	bl	8001288 <HAL_GetTick>
 8002d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d12:	e009      	b.n	8002d28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d14:	f7fe fab8 	bl	8001288 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d22:	d901      	bls.n	8002d28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e007      	b.n	8002d38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d34:	d1ee      	bne.n	8002d14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	420e0040 	.word	0x420e0040
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	420e0044 	.word	0x420e0044

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e264      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d075      	beq.n	8002e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6e:	4ba3      	ldr	r3, [pc, #652]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b9d      	ldr	r3, [pc, #628]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d05b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x108>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d157      	bne.n	8002e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e23f      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x74>
 8002db6:	4b91      	ldr	r3, [pc, #580]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a90      	ldr	r2, [pc, #576]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e01d      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a8a      	ldr	r2, [pc, #552]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002de8:	4b84      	ldr	r3, [pc, #528]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a83      	ldr	r2, [pc, #524]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a80      	ldr	r2, [pc, #512]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fa3e 	bl	8001288 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fa3a 	bl	8001288 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e204      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xc0>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fa2a 	bl	8001288 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fa26 	bl	8001288 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1f0      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	4b6c      	ldr	r3, [pc, #432]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0xe8>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e66:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b62      	ldr	r3, [pc, #392]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1c4      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4952      	ldr	r1, [pc, #328]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	e03a      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_RCC_OscConfig+0x2b0>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe f9df 	bl	8001288 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fe f9db 	bl	8001288 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1a5      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4940      	ldr	r1, [pc, #256]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f02:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_OscConfig+0x2b0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe f9be 	bl	8001288 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe f9ba 	bl	8001288 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e184      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d030      	beq.n	8002f9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCC_OscConfig+0x2b4>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe f99e 	bl	8001288 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe f99a 	bl	8001288 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e164      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x200>
 8002f6e:	e015      	b.n	8002f9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCC_OscConfig+0x2b4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fe f987 	bl	8001288 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7fe f983 	bl	8001288 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e14d      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a0 	beq.w	80030ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_OscConfig+0x2b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d121      	bne.n	800302a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_RCC_OscConfig+0x2b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_RCC_OscConfig+0x2b8>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe f949 	bl	8001288 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e011      	b.n	800301e <HAL_RCC_OscConfig+0x2ce>
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470000 	.word	0x42470000
 8003004:	42470e80 	.word	0x42470e80
 8003008:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300c:	f7fe f93c 	bl	8001288 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e106      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_RCC_OscConfig+0x4e4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d106      	bne.n	8003040 <HAL_RCC_OscConfig+0x2f0>
 8003032:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
 800303e:	e01c      	b.n	800307a <HAL_RCC_OscConfig+0x32a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_OscConfig+0x312>
 8003048:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a7a      	ldr	r2, [pc, #488]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	4b78      	ldr	r3, [pc, #480]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a77      	ldr	r2, [pc, #476]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	e00b      	b.n	800307a <HAL_RCC_OscConfig+0x32a>
 8003062:	4b75      	ldr	r3, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a74      	ldr	r2, [pc, #464]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	4b72      	ldr	r3, [pc, #456]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a71      	ldr	r2, [pc, #452]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d015      	beq.n	80030ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe f901 	bl	8001288 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f8fd 	bl	8001288 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0c5      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ee      	beq.n	800308a <HAL_RCC_OscConfig+0x33a>
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f8eb 	bl	8001288 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f8e7 	bl	8001288 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0af      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	4b5a      	ldr	r3, [pc, #360]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ee      	bne.n	80030b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a55      	ldr	r2, [pc, #340]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80030e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 809b 	beq.w	800322a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d05c      	beq.n	80031ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d141      	bne.n	800318c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_RCC_OscConfig+0x4ec>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe f8bb 	bl	8001288 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f8b7 	bl	8001288 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e081      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	019b      	lsls	r3, r3, #6
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	4937      	ldr	r1, [pc, #220]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315e:	4b37      	ldr	r3, [pc, #220]	; (800323c <HAL_RCC_OscConfig+0x4ec>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe f890 	bl	8001288 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe f88c 	bl	8001288 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e056      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x41c>
 800318a:	e04e      	b.n	800322a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318c:	4b2b      	ldr	r3, [pc, #172]	; (800323c <HAL_RCC_OscConfig+0x4ec>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fe f879 	bl	8001288 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319a:	f7fe f875 	bl	8001288 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e03f      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f0      	bne.n	800319a <HAL_RCC_OscConfig+0x44a>
 80031b8:	e037      	b.n	800322a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e032      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d028      	beq.n	8003226 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d121      	bne.n	8003226 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d11a      	bne.n	8003226 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f6:	4013      	ands	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	3b01      	subs	r3, #1
 8003210:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40007000 	.word	0x40007000
 8003238:	40023800 	.word	0x40023800
 800323c:	42470060 	.word	0x42470060

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cc      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d90c      	bls.n	800327c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e067      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4934      	ldr	r1, [pc, #208]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fd ffaa 	bl	8001288 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fd ffa6 	bl	8001288 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e04f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20c      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fdce 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00
 80033fc:	40023800 	.word	0x40023800
 8003400:	08006318 	.word	0x08006318
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	2300      	movs	r3, #0
 800341e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003424:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d00d      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003430:	2b08      	cmp	r3, #8
 8003432:	f200 80bd 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 800343a:	2b04      	cmp	r3, #4
 800343c:	d003      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x3a>
 800343e:	e0b7      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003442:	60bb      	str	r3, [r7, #8]
       break;
 8003444:	e0b7      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003446:	4b61      	ldr	r3, [pc, #388]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003448:	60bb      	str	r3, [r7, #8]
      break;
 800344a:	e0b4      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800344c:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003454:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d04d      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003462:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	461a      	mov	r2, r3
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	ea02 0800 	and.w	r8, r2, r0
 800347a:	ea03 0901 	and.w	r9, r3, r1
 800347e:	4640      	mov	r0, r8
 8003480:	4649      	mov	r1, r9
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	014b      	lsls	r3, r1, #5
 800348c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003490:	0142      	lsls	r2, r0, #5
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	ebb0 0008 	subs.w	r0, r0, r8
 800349a:	eb61 0109 	sbc.w	r1, r1, r9
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	018b      	lsls	r3, r1, #6
 80034a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034ac:	0182      	lsls	r2, r0, #6
 80034ae:	1a12      	subs	r2, r2, r0
 80034b0:	eb63 0301 	sbc.w	r3, r3, r1
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	00d9      	lsls	r1, r3, #3
 80034be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034c2:	00d0      	lsls	r0, r2, #3
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	eb12 0208 	adds.w	r2, r2, r8
 80034cc:	eb43 0309 	adc.w	r3, r3, r9
 80034d0:	f04f 0000 	mov.w	r0, #0
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	0259      	lsls	r1, r3, #9
 80034da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034de:	0250      	lsls	r0, r2, #9
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	f7fc fed6 	bl	80002a0 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e04a      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	461a      	mov	r2, r3
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	ea02 0400 	and.w	r4, r2, r0
 8003516:	ea03 0501 	and.w	r5, r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	014b      	lsls	r3, r1, #5
 8003528:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800352c:	0142      	lsls	r2, r0, #5
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	1b00      	subs	r0, r0, r4
 8003534:	eb61 0105 	sbc.w	r1, r1, r5
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	018b      	lsls	r3, r1, #6
 8003542:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003546:	0182      	lsls	r2, r0, #6
 8003548:	1a12      	subs	r2, r2, r0
 800354a:	eb63 0301 	sbc.w	r3, r3, r1
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	00d9      	lsls	r1, r3, #3
 8003558:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800355c:	00d0      	lsls	r0, r2, #3
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	1912      	adds	r2, r2, r4
 8003564:	eb45 0303 	adc.w	r3, r5, r3
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	0299      	lsls	r1, r3, #10
 8003572:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003576:	0290      	lsls	r0, r2, #10
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	461a      	mov	r2, r3
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f7fc fe8a 	bl	80002a0 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	60bb      	str	r3, [r7, #8]
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035b2:	60bb      	str	r3, [r7, #8]
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	68bb      	ldr	r3, [r7, #8]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08006328 	.word	0x08006328

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08006328 	.word	0x08006328

08003638 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	220f      	movs	r2, #15
 8003646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_GetClockConfig+0x5c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <HAL_RCC_GetClockConfig+0x5c>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_RCC_GetClockConfig+0x5c>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_GetClockConfig+0x5c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_RCC_GetClockConfig+0x60>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40023c00 	.word	0x40023c00

0800369c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e041      	b.n	8003732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f839 	bl	800373a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 f9d8 	bl	8003a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d001      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04e      	b.n	8003806 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_TIM_Base_Start_IT+0xc4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d01d      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_TIM_Base_Start_IT+0xc8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_TIM_Base_Start_IT+0xcc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_TIM_Base_Start_IT+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_TIM_Base_Start_IT+0xd4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_TIM_Base_Start_IT+0xd8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_TIM_Base_Start_IT+0xdc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d010      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	e007      	b.n	8003804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40010400 	.word	0x40010400
 8003828:	40014000 	.word	0x40014000
 800382c:	40001800 	.word	0x40001800

08003830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0202 	mvn.w	r2, #2
 800385c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8ee 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8e0 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8f1 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0204 	mvn.w	r2, #4
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8c4 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8b6 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f8c7 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0208 	mvn.w	r2, #8
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f89a 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f88c 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f89d 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b10      	cmp	r3, #16
 8003940:	d122      	bne.n	8003988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b10      	cmp	r3, #16
 800394e:	d11b      	bne.n	8003988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0210 	mvn.w	r2, #16
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2208      	movs	r2, #8
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f870 	bl	8003a54 <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f862 	bl	8003a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f873 	bl	8003a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0201 	mvn.w	r2, #1
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd f926 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b80      	cmp	r3, #128	; 0x80
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b80      	cmp	r3, #128	; 0x80
 80039ce:	d107      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f902 	bl	8003be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d10e      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d107      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f838 	bl	8003a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d10e      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d107      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0220 	mvn.w	r2, #32
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8cc 	bl	8003bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <TIM_Base_SetConfig+0x114>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d00f      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a3d      	ldr	r2, [pc, #244]	; (8003ba8 <TIM_Base_SetConfig+0x118>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3c      	ldr	r2, [pc, #240]	; (8003bac <TIM_Base_SetConfig+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <TIM_Base_SetConfig+0x120>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3a      	ldr	r2, [pc, #232]	; (8003bb4 <TIM_Base_SetConfig+0x124>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2f      	ldr	r2, [pc, #188]	; (8003ba4 <TIM_Base_SetConfig+0x114>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d027      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <TIM_Base_SetConfig+0x118>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d023      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <TIM_Base_SetConfig+0x11c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01f      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <TIM_Base_SetConfig+0x120>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <TIM_Base_SetConfig+0x124>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d017      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <TIM_Base_SetConfig+0x128>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <TIM_Base_SetConfig+0x12c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <TIM_Base_SetConfig+0x130>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <TIM_Base_SetConfig+0x134>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <TIM_Base_SetConfig+0x138>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <TIM_Base_SetConfig+0x13c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <TIM_Base_SetConfig+0x114>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0xf8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <TIM_Base_SetConfig+0x124>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	615a      	str	r2, [r3, #20]
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800
 8003bc4:	40001800 	.word	0x40001800
 8003bc8:	40001c00 	.word	0x40001c00
 8003bcc:	40002000 	.word	0x40002000

08003bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e03f      	b.n	8003c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f8fc 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 ff5b 	bl	8004af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b08a      	sub	sp, #40	; 0x28
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d17c      	bne.n	8003dac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_UART_Transmit+0x2c>
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e075      	b.n	8003dae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UART_Transmit+0x3e>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e06e      	b.n	8003dae <HAL_UART_Transmit+0x11c>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	; 0x21
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce6:	f7fd facf 	bl	8001288 <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d00:	d108      	bne.n	8003d14 <HAL_UART_Transmit+0x82>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e003      	b.n	8003d1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d24:	e02a      	b.n	8003d7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fc17 	bl	8004564 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e036      	b.n	8003dae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3302      	adds	r3, #2
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e007      	b.n	8003d6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1cf      	bne.n	8003d26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fbe7 	bl	8004564 <UART_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d11d      	bne.n	8003e0c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Receive_DMA+0x26>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e016      	b.n	8003e0e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Receive_DMA+0x38>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e00f      	b.n	8003e0e <HAL_UART_Receive_DMA+0x58>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fc1c 	bl	8004640 <UART_Start_Receive_DMA>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b0ba      	sub	sp, #232	; 0xe8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_UART_IRQHandler+0x66>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fd83 	bl	8004982 <UART_Receive_IT>
      return;
 8003e7c:	e256      	b.n	800432c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80de 	beq.w	8004044 <HAL_UART_IRQHandler+0x22c>
 8003e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80d1 	beq.w	8004044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xae>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_UART_IRQHandler+0xd2>
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0202 	orr.w	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_UART_IRQHandler+0xf6>
 8003ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d011      	beq.n	8003f3e <HAL_UART_IRQHandler+0x126>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0208 	orr.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 81ed 	beq.w	8004322 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_UART_IRQHandler+0x14e>
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fd0e 	bl	8004982 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_UART_IRQHandler+0x17a>
 8003f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d04f      	beq.n	8004032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fc16 	bl	80047c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d141      	bne.n	800402a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3314      	adds	r3, #20
 8003fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1d9      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <HAL_UART_IRQHandler+0x3dc>)
 8004000:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe f802 	bl	8002010 <HAL_DMA_Abort_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	e00e      	b.n	8004040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f990 	bl	8004348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e00a      	b.n	8004040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f98c 	bl	8004348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	e006      	b.n	8004040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f988 	bl	8004348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800403e:	e170      	b.n	8004322 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	bf00      	nop
    return;
 8004042:	e16e      	b.n	8004322 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 814a 	bne.w	80042e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8143 	beq.w	80042e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 813c 	beq.w	80042e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	f040 80b4 	bne.w	80041f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800409c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8140 	beq.w	8004326 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ae:	429a      	cmp	r2, r3
 80040b0:	f080 8139 	bcs.w	8004326 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c6:	f000 8088 	beq.w	80041da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004102:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800410e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1d9      	bne.n	80040ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800413a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800413e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800414c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e1      	bne.n	8004116 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004176:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004178:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800417c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e3      	bne.n	8004152 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041aa:	f023 0310 	bic.w	r3, r3, #16
 80041ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80041be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e3      	bne.n	8004198 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd feab 	bl	8001f30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8b6 	bl	800435c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041f0:	e099      	b.n	8004326 <HAL_UART_IRQHandler+0x50e>
 80041f2:	bf00      	nop
 80041f4:	0800488b 	.word	0x0800488b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004200:	b29b      	uxth	r3, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 808b 	beq.w	800432a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8086 	beq.w	800432a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004242:	647a      	str	r2, [r7, #68]	; 0x44
 8004244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e3      	bne.n	800421e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	623b      	str	r3, [r7, #32]
   return(result);
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800427a:	633a      	str	r2, [r7, #48]	; 0x30
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e3      	bne.n	8004256 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0310 	bic.w	r3, r3, #16
 80042b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042c0:	61fa      	str	r2, [r7, #28]
 80042c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	69b9      	ldr	r1, [r7, #24]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	617b      	str	r3, [r7, #20]
   return(result);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e3      	bne.n	800429c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f83e 	bl	800435c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e0:	e023      	b.n	800432a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_UART_IRQHandler+0x4ea>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fad9 	bl	80048b2 <UART_Transmit_IT>
    return;
 8004300:	e014      	b.n	800432c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <HAL_UART_IRQHandler+0x514>
 800430e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fb19 	bl	8004952 <UART_EndTransmit_IT>
    return;
 8004320:	e004      	b.n	800432c <HAL_UART_IRQHandler+0x514>
    return;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_UART_IRQHandler+0x514>
      return;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_UART_IRQHandler+0x514>
      return;
 800432a:	bf00      	nop
  }
}
 800432c:	37e8      	adds	r7, #232	; 0xe8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop

08004334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b09c      	sub	sp, #112	; 0x70
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d172      	bne.n	8004476 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	2200      	movs	r2, #0
 8004394:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	667b      	str	r3, [r7, #100]	; 0x64
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043ea:	647a      	str	r2, [r7, #68]	; 0x44
 80043ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	623b      	str	r3, [r7, #32]
   return(result);
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004414:	663b      	str	r3, [r7, #96]	; 0x60
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800441e:	633a      	str	r2, [r7, #48]	; 0x30
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	2b01      	cmp	r3, #1
 8004440:	d119      	bne.n	8004476 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	60fb      	str	r3, [r7, #12]
   return(result);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004462:	61fa      	str	r2, [r7, #28]
 8004464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	617b      	str	r3, [r7, #20]
   return(result);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e5      	bne.n	8004442 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b01      	cmp	r3, #1
 800447c:	d106      	bne.n	800448c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004482:	4619      	mov	r1, r3
 8004484:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004486:	f7ff ff69 	bl	800435c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800448a:	e002      	b.n	8004492 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800448c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800448e:	f7fc fb6f 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8004492:	bf00      	nop
 8004494:	3770      	adds	r7, #112	; 0x70
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d108      	bne.n	80044c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ff4e 	bl	800435c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044c0:	e002      	b.n	80044c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7fc fb6c 	bl	8000ba0 <HAL_UART_RxHalfCpltCallback>
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b21      	cmp	r3, #33	; 0x21
 8004502:	d108      	bne.n	8004516 <UART_DMAError+0x46>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2200      	movs	r2, #0
 800450e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	f000 f92f 	bl	8004774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b22      	cmp	r3, #34	; 0x22
 8004536:	d108      	bne.n	800454a <UART_DMAError+0x7a>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004544:	68b8      	ldr	r0, [r7, #8]
 8004546:	f000 f93d 	bl	80047c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0210 	orr.w	r2, r3, #16
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004556:	68b8      	ldr	r0, [r7, #8]
 8004558:	f7ff fef6 	bl	8004348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b090      	sub	sp, #64	; 0x40
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004574:	e050      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457c:	d04c      	beq.n	8004618 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <UART_WaitOnFlagUntilTimeout+0x30>
 8004584:	f7fc fe80 	bl	8001288 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004590:	429a      	cmp	r2, r3
 8004592:	d241      	bcs.n	8004618 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045b4:	637a      	str	r2, [r7, #52]	; 0x34
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	613b      	str	r3, [r7, #16]
   return(result);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e8:	623a      	str	r2, [r7, #32]
 80045ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	69f9      	ldr	r1, [r7, #28]
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e00f      	b.n	8004638 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	429a      	cmp	r2, r3
 8004634:	d09f      	beq.n	8004576 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3740      	adds	r7, #64	; 0x40
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b098      	sub	sp, #96	; 0x60
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2222      	movs	r2, #34	; 0x22
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	4a3e      	ldr	r2, [pc, #248]	; (8004768 <UART_Start_Receive_DMA+0x128>)
 800466e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	4a3d      	ldr	r2, [pc, #244]	; (800476c <UART_Start_Receive_DMA+0x12c>)
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <UART_Start_Receive_DMA+0x130>)
 800467e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	2200      	movs	r2, #0
 8004686:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004688:	f107 0308 	add.w	r3, r7, #8
 800468c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	f7fd fbee 	bl	8001e80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80046e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80046f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3314      	adds	r3, #20
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	657b      	str	r3, [r7, #84]	; 0x54
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3314      	adds	r3, #20
 8004714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004716:	63ba      	str	r2, [r7, #56]	; 0x38
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800471c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	617b      	str	r3, [r7, #20]
   return(result);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800474a:	627a      	str	r2, [r7, #36]	; 0x24
 800474c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6a39      	ldr	r1, [r7, #32]
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	61fb      	str	r3, [r7, #28]
   return(result);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3760      	adds	r7, #96	; 0x60
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	08004375 	.word	0x08004375
 800476c:	0800449b 	.word	0x0800449b
 8004770:	080044d1 	.word	0x080044d1

08004774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	60bb      	str	r3, [r7, #8]
   return(result);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	61ba      	str	r2, [r7, #24]
 800479e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	613b      	str	r3, [r7, #16]
   return(result);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80047b8:	bf00      	nop
 80047ba:	3724      	adds	r7, #36	; 0x24
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b095      	sub	sp, #84	; 0x54
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ec:	643a      	str	r2, [r7, #64]	; 0x40
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b01      	cmp	r3, #1
 800483a:	d119      	bne.n	8004870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60bb      	str	r3, [r7, #8]
   return(result);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485c:	61ba      	str	r2, [r7, #24]
 800485e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	613b      	str	r3, [r7, #16]
   return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800487e:	bf00      	nop
 8004880:	3754      	adds	r7, #84	; 0x54
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fd4f 	bl	8004348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b21      	cmp	r3, #33	; 0x21
 80048c4:	d13e      	bne.n	8004944 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ce:	d114      	bne.n	80048fa <UART_Transmit_IT+0x48>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d110      	bne.n	80048fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	1c9a      	adds	r2, r3, #2
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]
 80048f8:	e008      	b.n	800490c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	1c59      	adds	r1, r3, #1
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6211      	str	r1, [r2, #32]
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29b      	uxth	r3, r3
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4619      	mov	r1, r3
 800491a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10f      	bne.n	8004940 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800492e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800493e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fcde 	bl	8004334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08c      	sub	sp, #48	; 0x30
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b22      	cmp	r3, #34	; 0x22
 8004994:	f040 80ab 	bne.w	8004aee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a0:	d117      	bne.n	80049d2 <UART_Receive_IT+0x50>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
 80049d0:	e026      	b.n	8004a20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d007      	beq.n	80049f6 <UART_Receive_IT+0x74>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <UART_Receive_IT+0x82>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e008      	b.n	8004a16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d15a      	bne.n	8004aea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0220 	bic.w	r2, r2, #32
 8004a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d135      	bne.n	8004ae0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	623a      	str	r2, [r7, #32]
 8004a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d10a      	bne.n	8004ad2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fc3f 	bl	800435c <HAL_UARTEx_RxEventCallback>
 8004ade:	e002      	b.n	8004ae6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fc f845 	bl	8000b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e002      	b.n	8004af0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3730      	adds	r7, #48	; 0x30
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	b09f      	sub	sp, #124	; 0x7c
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	68d9      	ldr	r1, [r3, #12]
 8004b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	ea40 0301 	orr.w	r3, r0, r1
 8004b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b3c:	f021 010c 	bic.w	r1, r1, #12
 8004b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b46:	430b      	orrs	r3, r1
 8004b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	6999      	ldr	r1, [r3, #24]
 8004b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	ea40 0301 	orr.w	r3, r0, r1
 8004b60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4bc5      	ldr	r3, [pc, #788]	; (8004e7c <UART_SetConfig+0x384>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d004      	beq.n	8004b76 <UART_SetConfig+0x7e>
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4bc3      	ldr	r3, [pc, #780]	; (8004e80 <UART_SetConfig+0x388>)
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d103      	bne.n	8004b7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b76:	f7fe fd4b 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8004b7a:	6778      	str	r0, [r7, #116]	; 0x74
 8004b7c:	e002      	b.n	8004b84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b7e:	f7fe fd33 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004b82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	f040 80b6 	bne.w	8004cfc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b92:	461c      	mov	r4, r3
 8004b94:	f04f 0500 	mov.w	r5, #0
 8004b98:	4622      	mov	r2, r4
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	6439      	str	r1, [r7, #64]	; 0x40
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ba8:	1912      	adds	r2, r2, r4
 8004baa:	eb45 0303 	adc.w	r3, r5, r3
 8004bae:	f04f 0000 	mov.w	r0, #0
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	00d9      	lsls	r1, r3, #3
 8004bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bbc:	00d0      	lsls	r0, r2, #3
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	1911      	adds	r1, r2, r4
 8004bc4:	6639      	str	r1, [r7, #96]	; 0x60
 8004bc6:	416b      	adcs	r3, r5
 8004bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	1891      	adds	r1, r2, r2
 8004bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004be0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004be4:	f7fb fb5c 	bl	80002a0 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4ba5      	ldr	r3, [pc, #660]	; (8004e84 <UART_SetConfig+0x38c>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	011e      	lsls	r6, r3, #4
 8004bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf8:	461c      	mov	r4, r3
 8004bfa:	f04f 0500 	mov.w	r5, #0
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	1891      	adds	r1, r2, r2
 8004c04:	6339      	str	r1, [r7, #48]	; 0x30
 8004c06:	415b      	adcs	r3, r3
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c0e:	1912      	adds	r2, r2, r4
 8004c10:	eb45 0303 	adc.w	r3, r5, r3
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f04f 0100 	mov.w	r1, #0
 8004c1c:	00d9      	lsls	r1, r3, #3
 8004c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c22:	00d0      	lsls	r0, r2, #3
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	1911      	adds	r1, r2, r4
 8004c2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c2c:	416b      	adcs	r3, r5
 8004c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	461a      	mov	r2, r3
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	1891      	adds	r1, r2, r2
 8004c3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c3e:	415b      	adcs	r3, r3
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c4a:	f7fb fb29 	bl	80002a0 <__aeabi_uldivmod>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4b8c      	ldr	r3, [pc, #560]	; (8004e84 <UART_SetConfig+0x38c>)
 8004c54:	fba3 1302 	umull	r1, r3, r3, r2
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	2164      	movs	r1, #100	; 0x64
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	3332      	adds	r3, #50	; 0x32
 8004c66:	4a87      	ldr	r2, [pc, #540]	; (8004e84 <UART_SetConfig+0x38c>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c74:	441e      	add	r6, r3
 8004c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	1894      	adds	r4, r2, r2
 8004c84:	623c      	str	r4, [r7, #32]
 8004c86:	415b      	adcs	r3, r3
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c8e:	1812      	adds	r2, r2, r0
 8004c90:	eb41 0303 	adc.w	r3, r1, r3
 8004c94:	f04f 0400 	mov.w	r4, #0
 8004c98:	f04f 0500 	mov.w	r5, #0
 8004c9c:	00dd      	lsls	r5, r3, #3
 8004c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ca2:	00d4      	lsls	r4, r2, #3
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	1814      	adds	r4, r2, r0
 8004caa:	653c      	str	r4, [r7, #80]	; 0x50
 8004cac:	414b      	adcs	r3, r1
 8004cae:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	1891      	adds	r1, r2, r2
 8004cbc:	61b9      	str	r1, [r7, #24]
 8004cbe:	415b      	adcs	r3, r3
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cca:	f7fb fae9 	bl	80002a0 <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4b6c      	ldr	r3, [pc, #432]	; (8004e84 <UART_SetConfig+0x38c>)
 8004cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	2164      	movs	r1, #100	; 0x64
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	3332      	adds	r3, #50	; 0x32
 8004ce6:	4a67      	ldr	r2, [pc, #412]	; (8004e84 <UART_SetConfig+0x38c>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f003 0207 	and.w	r2, r3, #7
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4432      	add	r2, r6
 8004cf8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cfa:	e0b9      	b.n	8004e70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfe:	461c      	mov	r4, r3
 8004d00:	f04f 0500 	mov.w	r5, #0
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	1891      	adds	r1, r2, r2
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	415b      	adcs	r3, r3
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d14:	1912      	adds	r2, r2, r4
 8004d16:	eb45 0303 	adc.w	r3, r5, r3
 8004d1a:	f04f 0000 	mov.w	r0, #0
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	00d9      	lsls	r1, r3, #3
 8004d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d28:	00d0      	lsls	r0, r2, #3
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	eb12 0804 	adds.w	r8, r2, r4
 8004d32:	eb43 0905 	adc.w	r9, r3, r5
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f04f 0100 	mov.w	r1, #0
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	008b      	lsls	r3, r1, #2
 8004d4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d4e:	0082      	lsls	r2, r0, #2
 8004d50:	4640      	mov	r0, r8
 8004d52:	4649      	mov	r1, r9
 8004d54:	f7fb faa4 	bl	80002a0 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <UART_SetConfig+0x38c>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	011e      	lsls	r6, r3, #4
 8004d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	1894      	adds	r4, r2, r2
 8004d74:	60bc      	str	r4, [r7, #8]
 8004d76:	415b      	adcs	r3, r3
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d7e:	1812      	adds	r2, r2, r0
 8004d80:	eb41 0303 	adc.w	r3, r1, r3
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	f04f 0500 	mov.w	r5, #0
 8004d8c:	00dd      	lsls	r5, r3, #3
 8004d8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d92:	00d4      	lsls	r4, r2, #3
 8004d94:	4622      	mov	r2, r4
 8004d96:	462b      	mov	r3, r5
 8004d98:	1814      	adds	r4, r2, r0
 8004d9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	008b      	lsls	r3, r1, #2
 8004db4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004db8:	0082      	lsls	r2, r0, #2
 8004dba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dbe:	f7fb fa6f 	bl	80002a0 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <UART_SetConfig+0x38c>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	; 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	3332      	adds	r3, #50	; 0x32
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <UART_SetConfig+0x38c>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de6:	441e      	add	r6, r3
 8004de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dea:	4618      	mov	r0, r3
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	1894      	adds	r4, r2, r2
 8004df6:	603c      	str	r4, [r7, #0]
 8004df8:	415b      	adcs	r3, r3
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e00:	1812      	adds	r2, r2, r0
 8004e02:	eb41 0303 	adc.w	r3, r1, r3
 8004e06:	f04f 0400 	mov.w	r4, #0
 8004e0a:	f04f 0500 	mov.w	r5, #0
 8004e0e:	00dd      	lsls	r5, r3, #3
 8004e10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e14:	00d4      	lsls	r4, r2, #3
 8004e16:	4622      	mov	r2, r4
 8004e18:	462b      	mov	r3, r5
 8004e1a:	eb12 0a00 	adds.w	sl, r2, r0
 8004e1e:	eb43 0b01 	adc.w	fp, r3, r1
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	008b      	lsls	r3, r1, #2
 8004e36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e3a:	0082      	lsls	r2, r0, #2
 8004e3c:	4650      	mov	r0, sl
 8004e3e:	4659      	mov	r1, fp
 8004e40:	f7fb fa2e 	bl	80002a0 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <UART_SetConfig+0x38c>)
 8004e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2164      	movs	r1, #100	; 0x64
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <UART_SetConfig+0x38c>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4432      	add	r2, r6
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	377c      	adds	r7, #124	; 0x7c
 8004e74:	46bd      	mov	sp, r7
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40011000 	.word	0x40011000
 8004e80:	40011400 	.word	0x40011400
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <__errno>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	; (8004e90 <__errno+0x8>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	2000000c 	.word	0x2000000c

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	; (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	; (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	; (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	; (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f001 fa22 	bl	80062f0 <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	080063f4 	.word	0x080063f4
 8004ed0:	080063f4 	.word	0x080063f4
 8004ed4:	080063f4 	.word	0x080063f4
 8004ed8:	080063f8 	.word	0x080063f8

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <iprintf>:
 8004eec:	b40f      	push	{r0, r1, r2, r3}
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <iprintf+0x2c>)
 8004ef0:	b513      	push	{r0, r1, r4, lr}
 8004ef2:	681c      	ldr	r4, [r3, #0]
 8004ef4:	b124      	cbz	r4, 8004f00 <iprintf+0x14>
 8004ef6:	69a3      	ldr	r3, [r4, #24]
 8004ef8:	b913      	cbnz	r3, 8004f00 <iprintf+0x14>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 f866 	bl	8004fcc <__sinit>
 8004f00:	ab05      	add	r3, sp, #20
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	68a1      	ldr	r1, [r4, #8]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 f983 	bl	8005214 <_vfiprintf_r>
 8004f0e:	b002      	add	sp, #8
 8004f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f14:	b004      	add	sp, #16
 8004f16:	4770      	bx	lr
 8004f18:	2000000c 	.word	0x2000000c

08004f1c <std>:
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	4604      	mov	r4, r0
 8004f22:	e9c0 3300 	strd	r3, r3, [r0]
 8004f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f2a:	6083      	str	r3, [r0, #8]
 8004f2c:	8181      	strh	r1, [r0, #12]
 8004f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f30:	81c2      	strh	r2, [r0, #14]
 8004f32:	6183      	str	r3, [r0, #24]
 8004f34:	4619      	mov	r1, r3
 8004f36:	2208      	movs	r2, #8
 8004f38:	305c      	adds	r0, #92	; 0x5c
 8004f3a:	f7ff ffcf 	bl	8004edc <memset>
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <std+0x38>)
 8004f40:	6263      	str	r3, [r4, #36]	; 0x24
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <std+0x3c>)
 8004f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <std+0x40>)
 8004f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <std+0x44>)
 8004f4c:	6224      	str	r4, [r4, #32]
 8004f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	bf00      	nop
 8004f54:	080057bd 	.word	0x080057bd
 8004f58:	080057df 	.word	0x080057df
 8004f5c:	08005817 	.word	0x08005817
 8004f60:	0800583b 	.word	0x0800583b

08004f64 <_cleanup_r>:
 8004f64:	4901      	ldr	r1, [pc, #4]	; (8004f6c <_cleanup_r+0x8>)
 8004f66:	f000 b8af 	b.w	80050c8 <_fwalk_reent>
 8004f6a:	bf00      	nop
 8004f6c:	08005b15 	.word	0x08005b15

08004f70 <__sfmoreglue>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	1e4a      	subs	r2, r1, #1
 8004f74:	2568      	movs	r5, #104	; 0x68
 8004f76:	4355      	muls	r5, r2
 8004f78:	460e      	mov	r6, r1
 8004f7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f7e:	f000 f8c5 	bl	800510c <_malloc_r>
 8004f82:	4604      	mov	r4, r0
 8004f84:	b140      	cbz	r0, 8004f98 <__sfmoreglue+0x28>
 8004f86:	2100      	movs	r1, #0
 8004f88:	e9c0 1600 	strd	r1, r6, [r0]
 8004f8c:	300c      	adds	r0, #12
 8004f8e:	60a0      	str	r0, [r4, #8]
 8004f90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f94:	f7ff ffa2 	bl	8004edc <memset>
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}

08004f9c <__sfp_lock_acquire>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__sfp_lock_acquire+0x8>)
 8004f9e:	f000 b8b3 	b.w	8005108 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	20000400 	.word	0x20000400

08004fa8 <__sfp_lock_release>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sfp_lock_release+0x8>)
 8004faa:	f000 b8ae 	b.w	800510a <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000400 	.word	0x20000400

08004fb4 <__sinit_lock_acquire>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__sinit_lock_acquire+0x8>)
 8004fb6:	f000 b8a7 	b.w	8005108 <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	200003fb 	.word	0x200003fb

08004fc0 <__sinit_lock_release>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sinit_lock_release+0x8>)
 8004fc2:	f000 b8a2 	b.w	800510a <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	200003fb 	.word	0x200003fb

08004fcc <__sinit>:
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	4604      	mov	r4, r0
 8004fd0:	f7ff fff0 	bl	8004fb4 <__sinit_lock_acquire>
 8004fd4:	69a3      	ldr	r3, [r4, #24]
 8004fd6:	b11b      	cbz	r3, 8004fe0 <__sinit+0x14>
 8004fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fdc:	f7ff bff0 	b.w	8004fc0 <__sinit_lock_release>
 8004fe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fe4:	6523      	str	r3, [r4, #80]	; 0x50
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <__sinit+0x68>)
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <__sinit+0x6c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	bf04      	itt	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	61a3      	streq	r3, [r4, #24]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 f820 	bl	800503c <__sfp>
 8004ffc:	6060      	str	r0, [r4, #4]
 8004ffe:	4620      	mov	r0, r4
 8005000:	f000 f81c 	bl	800503c <__sfp>
 8005004:	60a0      	str	r0, [r4, #8]
 8005006:	4620      	mov	r0, r4
 8005008:	f000 f818 	bl	800503c <__sfp>
 800500c:	2200      	movs	r2, #0
 800500e:	60e0      	str	r0, [r4, #12]
 8005010:	2104      	movs	r1, #4
 8005012:	6860      	ldr	r0, [r4, #4]
 8005014:	f7ff ff82 	bl	8004f1c <std>
 8005018:	68a0      	ldr	r0, [r4, #8]
 800501a:	2201      	movs	r2, #1
 800501c:	2109      	movs	r1, #9
 800501e:	f7ff ff7d 	bl	8004f1c <std>
 8005022:	68e0      	ldr	r0, [r4, #12]
 8005024:	2202      	movs	r2, #2
 8005026:	2112      	movs	r1, #18
 8005028:	f7ff ff78 	bl	8004f1c <std>
 800502c:	2301      	movs	r3, #1
 800502e:	61a3      	str	r3, [r4, #24]
 8005030:	e7d2      	b.n	8004fd8 <__sinit+0xc>
 8005032:	bf00      	nop
 8005034:	08006338 	.word	0x08006338
 8005038:	08004f65 	.word	0x08004f65

0800503c <__sfp>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	4607      	mov	r7, r0
 8005040:	f7ff ffac 	bl	8004f9c <__sfp_lock_acquire>
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <__sfp+0x84>)
 8005046:	681e      	ldr	r6, [r3, #0]
 8005048:	69b3      	ldr	r3, [r6, #24]
 800504a:	b913      	cbnz	r3, 8005052 <__sfp+0x16>
 800504c:	4630      	mov	r0, r6
 800504e:	f7ff ffbd 	bl	8004fcc <__sinit>
 8005052:	3648      	adds	r6, #72	; 0x48
 8005054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005058:	3b01      	subs	r3, #1
 800505a:	d503      	bpl.n	8005064 <__sfp+0x28>
 800505c:	6833      	ldr	r3, [r6, #0]
 800505e:	b30b      	cbz	r3, 80050a4 <__sfp+0x68>
 8005060:	6836      	ldr	r6, [r6, #0]
 8005062:	e7f7      	b.n	8005054 <__sfp+0x18>
 8005064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005068:	b9d5      	cbnz	r5, 80050a0 <__sfp+0x64>
 800506a:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <__sfp+0x88>)
 800506c:	60e3      	str	r3, [r4, #12]
 800506e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005072:	6665      	str	r5, [r4, #100]	; 0x64
 8005074:	f000 f847 	bl	8005106 <__retarget_lock_init_recursive>
 8005078:	f7ff ff96 	bl	8004fa8 <__sfp_lock_release>
 800507c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005084:	6025      	str	r5, [r4, #0]
 8005086:	61a5      	str	r5, [r4, #24]
 8005088:	2208      	movs	r2, #8
 800508a:	4629      	mov	r1, r5
 800508c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005090:	f7ff ff24 	bl	8004edc <memset>
 8005094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800509c:	4620      	mov	r0, r4
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a0:	3468      	adds	r4, #104	; 0x68
 80050a2:	e7d9      	b.n	8005058 <__sfp+0x1c>
 80050a4:	2104      	movs	r1, #4
 80050a6:	4638      	mov	r0, r7
 80050a8:	f7ff ff62 	bl	8004f70 <__sfmoreglue>
 80050ac:	4604      	mov	r4, r0
 80050ae:	6030      	str	r0, [r6, #0]
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d1d5      	bne.n	8005060 <__sfp+0x24>
 80050b4:	f7ff ff78 	bl	8004fa8 <__sfp_lock_release>
 80050b8:	230c      	movs	r3, #12
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	e7ee      	b.n	800509c <__sfp+0x60>
 80050be:	bf00      	nop
 80050c0:	08006338 	.word	0x08006338
 80050c4:	ffff0001 	.word	0xffff0001

080050c8 <_fwalk_reent>:
 80050c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050cc:	4606      	mov	r6, r0
 80050ce:	4688      	mov	r8, r1
 80050d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050d4:	2700      	movs	r7, #0
 80050d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050da:	f1b9 0901 	subs.w	r9, r9, #1
 80050de:	d505      	bpl.n	80050ec <_fwalk_reent+0x24>
 80050e0:	6824      	ldr	r4, [r4, #0]
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	d1f7      	bne.n	80050d6 <_fwalk_reent+0xe>
 80050e6:	4638      	mov	r0, r7
 80050e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ec:	89ab      	ldrh	r3, [r5, #12]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d907      	bls.n	8005102 <_fwalk_reent+0x3a>
 80050f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050f6:	3301      	adds	r3, #1
 80050f8:	d003      	beq.n	8005102 <_fwalk_reent+0x3a>
 80050fa:	4629      	mov	r1, r5
 80050fc:	4630      	mov	r0, r6
 80050fe:	47c0      	blx	r8
 8005100:	4307      	orrs	r7, r0
 8005102:	3568      	adds	r5, #104	; 0x68
 8005104:	e7e9      	b.n	80050da <_fwalk_reent+0x12>

08005106 <__retarget_lock_init_recursive>:
 8005106:	4770      	bx	lr

08005108 <__retarget_lock_acquire_recursive>:
 8005108:	4770      	bx	lr

0800510a <__retarget_lock_release_recursive>:
 800510a:	4770      	bx	lr

0800510c <_malloc_r>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	1ccd      	adds	r5, r1, #3
 8005110:	f025 0503 	bic.w	r5, r5, #3
 8005114:	3508      	adds	r5, #8
 8005116:	2d0c      	cmp	r5, #12
 8005118:	bf38      	it	cc
 800511a:	250c      	movcc	r5, #12
 800511c:	2d00      	cmp	r5, #0
 800511e:	4606      	mov	r6, r0
 8005120:	db01      	blt.n	8005126 <_malloc_r+0x1a>
 8005122:	42a9      	cmp	r1, r5
 8005124:	d903      	bls.n	800512e <_malloc_r+0x22>
 8005126:	230c      	movs	r3, #12
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	2000      	movs	r0, #0
 800512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512e:	f000 fda3 	bl	8005c78 <__malloc_lock>
 8005132:	4921      	ldr	r1, [pc, #132]	; (80051b8 <_malloc_r+0xac>)
 8005134:	680a      	ldr	r2, [r1, #0]
 8005136:	4614      	mov	r4, r2
 8005138:	b99c      	cbnz	r4, 8005162 <_malloc_r+0x56>
 800513a:	4f20      	ldr	r7, [pc, #128]	; (80051bc <_malloc_r+0xb0>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	b923      	cbnz	r3, 800514a <_malloc_r+0x3e>
 8005140:	4621      	mov	r1, r4
 8005142:	4630      	mov	r0, r6
 8005144:	f000 fb2a 	bl	800579c <_sbrk_r>
 8005148:	6038      	str	r0, [r7, #0]
 800514a:	4629      	mov	r1, r5
 800514c:	4630      	mov	r0, r6
 800514e:	f000 fb25 	bl	800579c <_sbrk_r>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	d123      	bne.n	800519e <_malloc_r+0x92>
 8005156:	230c      	movs	r3, #12
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	4630      	mov	r0, r6
 800515c:	f000 fd92 	bl	8005c84 <__malloc_unlock>
 8005160:	e7e3      	b.n	800512a <_malloc_r+0x1e>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	1b5b      	subs	r3, r3, r5
 8005166:	d417      	bmi.n	8005198 <_malloc_r+0x8c>
 8005168:	2b0b      	cmp	r3, #11
 800516a:	d903      	bls.n	8005174 <_malloc_r+0x68>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	441c      	add	r4, r3
 8005170:	6025      	str	r5, [r4, #0]
 8005172:	e004      	b.n	800517e <_malloc_r+0x72>
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	42a2      	cmp	r2, r4
 8005178:	bf0c      	ite	eq
 800517a:	600b      	streq	r3, [r1, #0]
 800517c:	6053      	strne	r3, [r2, #4]
 800517e:	4630      	mov	r0, r6
 8005180:	f000 fd80 	bl	8005c84 <__malloc_unlock>
 8005184:	f104 000b 	add.w	r0, r4, #11
 8005188:	1d23      	adds	r3, r4, #4
 800518a:	f020 0007 	bic.w	r0, r0, #7
 800518e:	1ac2      	subs	r2, r0, r3
 8005190:	d0cc      	beq.n	800512c <_malloc_r+0x20>
 8005192:	1a1b      	subs	r3, r3, r0
 8005194:	50a3      	str	r3, [r4, r2]
 8005196:	e7c9      	b.n	800512c <_malloc_r+0x20>
 8005198:	4622      	mov	r2, r4
 800519a:	6864      	ldr	r4, [r4, #4]
 800519c:	e7cc      	b.n	8005138 <_malloc_r+0x2c>
 800519e:	1cc4      	adds	r4, r0, #3
 80051a0:	f024 0403 	bic.w	r4, r4, #3
 80051a4:	42a0      	cmp	r0, r4
 80051a6:	d0e3      	beq.n	8005170 <_malloc_r+0x64>
 80051a8:	1a21      	subs	r1, r4, r0
 80051aa:	4630      	mov	r0, r6
 80051ac:	f000 faf6 	bl	800579c <_sbrk_r>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d1dd      	bne.n	8005170 <_malloc_r+0x64>
 80051b4:	e7cf      	b.n	8005156 <_malloc_r+0x4a>
 80051b6:	bf00      	nop
 80051b8:	200000a4 	.word	0x200000a4
 80051bc:	200000a8 	.word	0x200000a8

080051c0 <__sfputc_r>:
 80051c0:	6893      	ldr	r3, [r2, #8]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	b410      	push	{r4}
 80051c8:	6093      	str	r3, [r2, #8]
 80051ca:	da08      	bge.n	80051de <__sfputc_r+0x1e>
 80051cc:	6994      	ldr	r4, [r2, #24]
 80051ce:	42a3      	cmp	r3, r4
 80051d0:	db01      	blt.n	80051d6 <__sfputc_r+0x16>
 80051d2:	290a      	cmp	r1, #10
 80051d4:	d103      	bne.n	80051de <__sfputc_r+0x1e>
 80051d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051da:	f000 bb33 	b.w	8005844 <__swbuf_r>
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	1c58      	adds	r0, r3, #1
 80051e2:	6010      	str	r0, [r2, #0]
 80051e4:	7019      	strb	r1, [r3, #0]
 80051e6:	4608      	mov	r0, r1
 80051e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <__sfputs_r>:
 80051ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f0:	4606      	mov	r6, r0
 80051f2:	460f      	mov	r7, r1
 80051f4:	4614      	mov	r4, r2
 80051f6:	18d5      	adds	r5, r2, r3
 80051f8:	42ac      	cmp	r4, r5
 80051fa:	d101      	bne.n	8005200 <__sfputs_r+0x12>
 80051fc:	2000      	movs	r0, #0
 80051fe:	e007      	b.n	8005210 <__sfputs_r+0x22>
 8005200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005204:	463a      	mov	r2, r7
 8005206:	4630      	mov	r0, r6
 8005208:	f7ff ffda 	bl	80051c0 <__sfputc_r>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d1f3      	bne.n	80051f8 <__sfputs_r+0xa>
 8005210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005214 <_vfiprintf_r>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	460d      	mov	r5, r1
 800521a:	b09d      	sub	sp, #116	; 0x74
 800521c:	4614      	mov	r4, r2
 800521e:	4698      	mov	r8, r3
 8005220:	4606      	mov	r6, r0
 8005222:	b118      	cbz	r0, 800522c <_vfiprintf_r+0x18>
 8005224:	6983      	ldr	r3, [r0, #24]
 8005226:	b90b      	cbnz	r3, 800522c <_vfiprintf_r+0x18>
 8005228:	f7ff fed0 	bl	8004fcc <__sinit>
 800522c:	4b89      	ldr	r3, [pc, #548]	; (8005454 <_vfiprintf_r+0x240>)
 800522e:	429d      	cmp	r5, r3
 8005230:	d11b      	bne.n	800526a <_vfiprintf_r+0x56>
 8005232:	6875      	ldr	r5, [r6, #4]
 8005234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005236:	07d9      	lsls	r1, r3, #31
 8005238:	d405      	bmi.n	8005246 <_vfiprintf_r+0x32>
 800523a:	89ab      	ldrh	r3, [r5, #12]
 800523c:	059a      	lsls	r2, r3, #22
 800523e:	d402      	bmi.n	8005246 <_vfiprintf_r+0x32>
 8005240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005242:	f7ff ff61 	bl	8005108 <__retarget_lock_acquire_recursive>
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	071b      	lsls	r3, r3, #28
 800524a:	d501      	bpl.n	8005250 <_vfiprintf_r+0x3c>
 800524c:	692b      	ldr	r3, [r5, #16]
 800524e:	b9eb      	cbnz	r3, 800528c <_vfiprintf_r+0x78>
 8005250:	4629      	mov	r1, r5
 8005252:	4630      	mov	r0, r6
 8005254:	f000 fb5a 	bl	800590c <__swsetup_r>
 8005258:	b1c0      	cbz	r0, 800528c <_vfiprintf_r+0x78>
 800525a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800525c:	07dc      	lsls	r4, r3, #31
 800525e:	d50e      	bpl.n	800527e <_vfiprintf_r+0x6a>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005264:	b01d      	add	sp, #116	; 0x74
 8005266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526a:	4b7b      	ldr	r3, [pc, #492]	; (8005458 <_vfiprintf_r+0x244>)
 800526c:	429d      	cmp	r5, r3
 800526e:	d101      	bne.n	8005274 <_vfiprintf_r+0x60>
 8005270:	68b5      	ldr	r5, [r6, #8]
 8005272:	e7df      	b.n	8005234 <_vfiprintf_r+0x20>
 8005274:	4b79      	ldr	r3, [pc, #484]	; (800545c <_vfiprintf_r+0x248>)
 8005276:	429d      	cmp	r5, r3
 8005278:	bf08      	it	eq
 800527a:	68f5      	ldreq	r5, [r6, #12]
 800527c:	e7da      	b.n	8005234 <_vfiprintf_r+0x20>
 800527e:	89ab      	ldrh	r3, [r5, #12]
 8005280:	0598      	lsls	r0, r3, #22
 8005282:	d4ed      	bmi.n	8005260 <_vfiprintf_r+0x4c>
 8005284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005286:	f7ff ff40 	bl	800510a <__retarget_lock_release_recursive>
 800528a:	e7e9      	b.n	8005260 <_vfiprintf_r+0x4c>
 800528c:	2300      	movs	r3, #0
 800528e:	9309      	str	r3, [sp, #36]	; 0x24
 8005290:	2320      	movs	r3, #32
 8005292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005296:	f8cd 800c 	str.w	r8, [sp, #12]
 800529a:	2330      	movs	r3, #48	; 0x30
 800529c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005460 <_vfiprintf_r+0x24c>
 80052a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052a4:	f04f 0901 	mov.w	r9, #1
 80052a8:	4623      	mov	r3, r4
 80052aa:	469a      	mov	sl, r3
 80052ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052b0:	b10a      	cbz	r2, 80052b6 <_vfiprintf_r+0xa2>
 80052b2:	2a25      	cmp	r2, #37	; 0x25
 80052b4:	d1f9      	bne.n	80052aa <_vfiprintf_r+0x96>
 80052b6:	ebba 0b04 	subs.w	fp, sl, r4
 80052ba:	d00b      	beq.n	80052d4 <_vfiprintf_r+0xc0>
 80052bc:	465b      	mov	r3, fp
 80052be:	4622      	mov	r2, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	4630      	mov	r0, r6
 80052c4:	f7ff ff93 	bl	80051ee <__sfputs_r>
 80052c8:	3001      	adds	r0, #1
 80052ca:	f000 80aa 	beq.w	8005422 <_vfiprintf_r+0x20e>
 80052ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d0:	445a      	add	r2, fp
 80052d2:	9209      	str	r2, [sp, #36]	; 0x24
 80052d4:	f89a 3000 	ldrb.w	r3, [sl]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a2 	beq.w	8005422 <_vfiprintf_r+0x20e>
 80052de:	2300      	movs	r3, #0
 80052e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052e8:	f10a 0a01 	add.w	sl, sl, #1
 80052ec:	9304      	str	r3, [sp, #16]
 80052ee:	9307      	str	r3, [sp, #28]
 80052f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052f4:	931a      	str	r3, [sp, #104]	; 0x68
 80052f6:	4654      	mov	r4, sl
 80052f8:	2205      	movs	r2, #5
 80052fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fe:	4858      	ldr	r0, [pc, #352]	; (8005460 <_vfiprintf_r+0x24c>)
 8005300:	f7fa ff76 	bl	80001f0 <memchr>
 8005304:	9a04      	ldr	r2, [sp, #16]
 8005306:	b9d8      	cbnz	r0, 8005340 <_vfiprintf_r+0x12c>
 8005308:	06d1      	lsls	r1, r2, #27
 800530a:	bf44      	itt	mi
 800530c:	2320      	movmi	r3, #32
 800530e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005312:	0713      	lsls	r3, r2, #28
 8005314:	bf44      	itt	mi
 8005316:	232b      	movmi	r3, #43	; 0x2b
 8005318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531c:	f89a 3000 	ldrb.w	r3, [sl]
 8005320:	2b2a      	cmp	r3, #42	; 0x2a
 8005322:	d015      	beq.n	8005350 <_vfiprintf_r+0x13c>
 8005324:	9a07      	ldr	r2, [sp, #28]
 8005326:	4654      	mov	r4, sl
 8005328:	2000      	movs	r0, #0
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4621      	mov	r1, r4
 8005330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005334:	3b30      	subs	r3, #48	; 0x30
 8005336:	2b09      	cmp	r3, #9
 8005338:	d94e      	bls.n	80053d8 <_vfiprintf_r+0x1c4>
 800533a:	b1b0      	cbz	r0, 800536a <_vfiprintf_r+0x156>
 800533c:	9207      	str	r2, [sp, #28]
 800533e:	e014      	b.n	800536a <_vfiprintf_r+0x156>
 8005340:	eba0 0308 	sub.w	r3, r0, r8
 8005344:	fa09 f303 	lsl.w	r3, r9, r3
 8005348:	4313      	orrs	r3, r2
 800534a:	9304      	str	r3, [sp, #16]
 800534c:	46a2      	mov	sl, r4
 800534e:	e7d2      	b.n	80052f6 <_vfiprintf_r+0xe2>
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	1d19      	adds	r1, r3, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	9103      	str	r1, [sp, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	bfbb      	ittet	lt
 800535c:	425b      	neglt	r3, r3
 800535e:	f042 0202 	orrlt.w	r2, r2, #2
 8005362:	9307      	strge	r3, [sp, #28]
 8005364:	9307      	strlt	r3, [sp, #28]
 8005366:	bfb8      	it	lt
 8005368:	9204      	strlt	r2, [sp, #16]
 800536a:	7823      	ldrb	r3, [r4, #0]
 800536c:	2b2e      	cmp	r3, #46	; 0x2e
 800536e:	d10c      	bne.n	800538a <_vfiprintf_r+0x176>
 8005370:	7863      	ldrb	r3, [r4, #1]
 8005372:	2b2a      	cmp	r3, #42	; 0x2a
 8005374:	d135      	bne.n	80053e2 <_vfiprintf_r+0x1ce>
 8005376:	9b03      	ldr	r3, [sp, #12]
 8005378:	1d1a      	adds	r2, r3, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	9203      	str	r2, [sp, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	bfb8      	it	lt
 8005382:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005386:	3402      	adds	r4, #2
 8005388:	9305      	str	r3, [sp, #20]
 800538a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005470 <_vfiprintf_r+0x25c>
 800538e:	7821      	ldrb	r1, [r4, #0]
 8005390:	2203      	movs	r2, #3
 8005392:	4650      	mov	r0, sl
 8005394:	f7fa ff2c 	bl	80001f0 <memchr>
 8005398:	b140      	cbz	r0, 80053ac <_vfiprintf_r+0x198>
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	eba0 000a 	sub.w	r0, r0, sl
 80053a0:	fa03 f000 	lsl.w	r0, r3, r0
 80053a4:	9b04      	ldr	r3, [sp, #16]
 80053a6:	4303      	orrs	r3, r0
 80053a8:	3401      	adds	r4, #1
 80053aa:	9304      	str	r3, [sp, #16]
 80053ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b0:	482c      	ldr	r0, [pc, #176]	; (8005464 <_vfiprintf_r+0x250>)
 80053b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053b6:	2206      	movs	r2, #6
 80053b8:	f7fa ff1a 	bl	80001f0 <memchr>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d03f      	beq.n	8005440 <_vfiprintf_r+0x22c>
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <_vfiprintf_r+0x254>)
 80053c2:	bb1b      	cbnz	r3, 800540c <_vfiprintf_r+0x1f8>
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	3307      	adds	r3, #7
 80053c8:	f023 0307 	bic.w	r3, r3, #7
 80053cc:	3308      	adds	r3, #8
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d2:	443b      	add	r3, r7
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	e767      	b.n	80052a8 <_vfiprintf_r+0x94>
 80053d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80053dc:	460c      	mov	r4, r1
 80053de:	2001      	movs	r0, #1
 80053e0:	e7a5      	b.n	800532e <_vfiprintf_r+0x11a>
 80053e2:	2300      	movs	r3, #0
 80053e4:	3401      	adds	r4, #1
 80053e6:	9305      	str	r3, [sp, #20]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f04f 0c0a 	mov.w	ip, #10
 80053ee:	4620      	mov	r0, r4
 80053f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053f4:	3a30      	subs	r2, #48	; 0x30
 80053f6:	2a09      	cmp	r2, #9
 80053f8:	d903      	bls.n	8005402 <_vfiprintf_r+0x1ee>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0c5      	beq.n	800538a <_vfiprintf_r+0x176>
 80053fe:	9105      	str	r1, [sp, #20]
 8005400:	e7c3      	b.n	800538a <_vfiprintf_r+0x176>
 8005402:	fb0c 2101 	mla	r1, ip, r1, r2
 8005406:	4604      	mov	r4, r0
 8005408:	2301      	movs	r3, #1
 800540a:	e7f0      	b.n	80053ee <_vfiprintf_r+0x1da>
 800540c:	ab03      	add	r3, sp, #12
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	462a      	mov	r2, r5
 8005412:	4b16      	ldr	r3, [pc, #88]	; (800546c <_vfiprintf_r+0x258>)
 8005414:	a904      	add	r1, sp, #16
 8005416:	4630      	mov	r0, r6
 8005418:	f3af 8000 	nop.w
 800541c:	4607      	mov	r7, r0
 800541e:	1c78      	adds	r0, r7, #1
 8005420:	d1d6      	bne.n	80053d0 <_vfiprintf_r+0x1bc>
 8005422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005424:	07d9      	lsls	r1, r3, #31
 8005426:	d405      	bmi.n	8005434 <_vfiprintf_r+0x220>
 8005428:	89ab      	ldrh	r3, [r5, #12]
 800542a:	059a      	lsls	r2, r3, #22
 800542c:	d402      	bmi.n	8005434 <_vfiprintf_r+0x220>
 800542e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005430:	f7ff fe6b 	bl	800510a <__retarget_lock_release_recursive>
 8005434:	89ab      	ldrh	r3, [r5, #12]
 8005436:	065b      	lsls	r3, r3, #25
 8005438:	f53f af12 	bmi.w	8005260 <_vfiprintf_r+0x4c>
 800543c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800543e:	e711      	b.n	8005264 <_vfiprintf_r+0x50>
 8005440:	ab03      	add	r3, sp, #12
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	462a      	mov	r2, r5
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <_vfiprintf_r+0x258>)
 8005448:	a904      	add	r1, sp, #16
 800544a:	4630      	mov	r0, r6
 800544c:	f000 f880 	bl	8005550 <_printf_i>
 8005450:	e7e4      	b.n	800541c <_vfiprintf_r+0x208>
 8005452:	bf00      	nop
 8005454:	0800635c 	.word	0x0800635c
 8005458:	0800637c 	.word	0x0800637c
 800545c:	0800633c 	.word	0x0800633c
 8005460:	0800639c 	.word	0x0800639c
 8005464:	080063a6 	.word	0x080063a6
 8005468:	00000000 	.word	0x00000000
 800546c:	080051ef 	.word	0x080051ef
 8005470:	080063a2 	.word	0x080063a2

08005474 <_printf_common>:
 8005474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	4616      	mov	r6, r2
 800547a:	4699      	mov	r9, r3
 800547c:	688a      	ldr	r2, [r1, #8]
 800547e:	690b      	ldr	r3, [r1, #16]
 8005480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005484:	4293      	cmp	r3, r2
 8005486:	bfb8      	it	lt
 8005488:	4613      	movlt	r3, r2
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005490:	4607      	mov	r7, r0
 8005492:	460c      	mov	r4, r1
 8005494:	b10a      	cbz	r2, 800549a <_printf_common+0x26>
 8005496:	3301      	adds	r3, #1
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	0699      	lsls	r1, r3, #26
 800549e:	bf42      	ittt	mi
 80054a0:	6833      	ldrmi	r3, [r6, #0]
 80054a2:	3302      	addmi	r3, #2
 80054a4:	6033      	strmi	r3, [r6, #0]
 80054a6:	6825      	ldr	r5, [r4, #0]
 80054a8:	f015 0506 	ands.w	r5, r5, #6
 80054ac:	d106      	bne.n	80054bc <_printf_common+0x48>
 80054ae:	f104 0a19 	add.w	sl, r4, #25
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	6832      	ldr	r2, [r6, #0]
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dc26      	bgt.n	800550a <_printf_common+0x96>
 80054bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054c0:	1e13      	subs	r3, r2, #0
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	bf18      	it	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	0692      	lsls	r2, r2, #26
 80054ca:	d42b      	bmi.n	8005524 <_printf_common+0xb0>
 80054cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d0:	4649      	mov	r1, r9
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	3001      	adds	r0, #1
 80054d8:	d01e      	beq.n	8005518 <_printf_common+0xa4>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	68e5      	ldr	r5, [r4, #12]
 80054de:	6832      	ldr	r2, [r6, #0]
 80054e0:	f003 0306 	and.w	r3, r3, #6
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	bf08      	it	eq
 80054e8:	1aad      	subeq	r5, r5, r2
 80054ea:	68a3      	ldr	r3, [r4, #8]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	bf0c      	ite	eq
 80054f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f4:	2500      	movne	r5, #0
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bfc4      	itt	gt
 80054fa:	1a9b      	subgt	r3, r3, r2
 80054fc:	18ed      	addgt	r5, r5, r3
 80054fe:	2600      	movs	r6, #0
 8005500:	341a      	adds	r4, #26
 8005502:	42b5      	cmp	r5, r6
 8005504:	d11a      	bne.n	800553c <_printf_common+0xc8>
 8005506:	2000      	movs	r0, #0
 8005508:	e008      	b.n	800551c <_printf_common+0xa8>
 800550a:	2301      	movs	r3, #1
 800550c:	4652      	mov	r2, sl
 800550e:	4649      	mov	r1, r9
 8005510:	4638      	mov	r0, r7
 8005512:	47c0      	blx	r8
 8005514:	3001      	adds	r0, #1
 8005516:	d103      	bne.n	8005520 <_printf_common+0xac>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	3501      	adds	r5, #1
 8005522:	e7c6      	b.n	80054b2 <_printf_common+0x3e>
 8005524:	18e1      	adds	r1, r4, r3
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	2030      	movs	r0, #48	; 0x30
 800552a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800552e:	4422      	add	r2, r4
 8005530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005538:	3302      	adds	r3, #2
 800553a:	e7c7      	b.n	80054cc <_printf_common+0x58>
 800553c:	2301      	movs	r3, #1
 800553e:	4622      	mov	r2, r4
 8005540:	4649      	mov	r1, r9
 8005542:	4638      	mov	r0, r7
 8005544:	47c0      	blx	r8
 8005546:	3001      	adds	r0, #1
 8005548:	d0e6      	beq.n	8005518 <_printf_common+0xa4>
 800554a:	3601      	adds	r6, #1
 800554c:	e7d9      	b.n	8005502 <_printf_common+0x8e>
	...

08005550 <_printf_i>:
 8005550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	460c      	mov	r4, r1
 8005556:	4691      	mov	r9, r2
 8005558:	7e27      	ldrb	r7, [r4, #24]
 800555a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800555c:	2f78      	cmp	r7, #120	; 0x78
 800555e:	4680      	mov	r8, r0
 8005560:	469a      	mov	sl, r3
 8005562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005566:	d807      	bhi.n	8005578 <_printf_i+0x28>
 8005568:	2f62      	cmp	r7, #98	; 0x62
 800556a:	d80a      	bhi.n	8005582 <_printf_i+0x32>
 800556c:	2f00      	cmp	r7, #0
 800556e:	f000 80d8 	beq.w	8005722 <_printf_i+0x1d2>
 8005572:	2f58      	cmp	r7, #88	; 0x58
 8005574:	f000 80a3 	beq.w	80056be <_printf_i+0x16e>
 8005578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800557c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005580:	e03a      	b.n	80055f8 <_printf_i+0xa8>
 8005582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005586:	2b15      	cmp	r3, #21
 8005588:	d8f6      	bhi.n	8005578 <_printf_i+0x28>
 800558a:	a001      	add	r0, pc, #4	; (adr r0, 8005590 <_printf_i+0x40>)
 800558c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055fd 	.word	0x080055fd
 8005598:	08005579 	.word	0x08005579
 800559c:	08005579 	.word	0x08005579
 80055a0:	08005579 	.word	0x08005579
 80055a4:	08005579 	.word	0x08005579
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005579 	.word	0x08005579
 80055b0:	08005579 	.word	0x08005579
 80055b4:	08005579 	.word	0x08005579
 80055b8:	08005579 	.word	0x08005579
 80055bc:	08005709 	.word	0x08005709
 80055c0:	0800562d 	.word	0x0800562d
 80055c4:	080056eb 	.word	0x080056eb
 80055c8:	08005579 	.word	0x08005579
 80055cc:	08005579 	.word	0x08005579
 80055d0:	0800572b 	.word	0x0800572b
 80055d4:	08005579 	.word	0x08005579
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	08005579 	.word	0x08005579
 80055e0:	08005579 	.word	0x08005579
 80055e4:	080056f3 	.word	0x080056f3
 80055e8:	680b      	ldr	r3, [r1, #0]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	600a      	str	r2, [r1, #0]
 80055f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0a3      	b.n	8005744 <_printf_i+0x1f4>
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	6808      	ldr	r0, [r1, #0]
 8005600:	062e      	lsls	r6, r5, #24
 8005602:	f100 0304 	add.w	r3, r0, #4
 8005606:	d50a      	bpl.n	800561e <_printf_i+0xce>
 8005608:	6805      	ldr	r5, [r0, #0]
 800560a:	600b      	str	r3, [r1, #0]
 800560c:	2d00      	cmp	r5, #0
 800560e:	da03      	bge.n	8005618 <_printf_i+0xc8>
 8005610:	232d      	movs	r3, #45	; 0x2d
 8005612:	426d      	negs	r5, r5
 8005614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005618:	485e      	ldr	r0, [pc, #376]	; (8005794 <_printf_i+0x244>)
 800561a:	230a      	movs	r3, #10
 800561c:	e019      	b.n	8005652 <_printf_i+0x102>
 800561e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005622:	6805      	ldr	r5, [r0, #0]
 8005624:	600b      	str	r3, [r1, #0]
 8005626:	bf18      	it	ne
 8005628:	b22d      	sxthne	r5, r5
 800562a:	e7ef      	b.n	800560c <_printf_i+0xbc>
 800562c:	680b      	ldr	r3, [r1, #0]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	1d18      	adds	r0, r3, #4
 8005632:	6008      	str	r0, [r1, #0]
 8005634:	0628      	lsls	r0, r5, #24
 8005636:	d501      	bpl.n	800563c <_printf_i+0xec>
 8005638:	681d      	ldr	r5, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0xf2>
 800563c:	0669      	lsls	r1, r5, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0xe8>
 8005640:	881d      	ldrh	r5, [r3, #0]
 8005642:	4854      	ldr	r0, [pc, #336]	; (8005794 <_printf_i+0x244>)
 8005644:	2f6f      	cmp	r7, #111	; 0x6f
 8005646:	bf0c      	ite	eq
 8005648:	2308      	moveq	r3, #8
 800564a:	230a      	movne	r3, #10
 800564c:	2100      	movs	r1, #0
 800564e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005652:	6866      	ldr	r6, [r4, #4]
 8005654:	60a6      	str	r6, [r4, #8]
 8005656:	2e00      	cmp	r6, #0
 8005658:	bfa2      	ittt	ge
 800565a:	6821      	ldrge	r1, [r4, #0]
 800565c:	f021 0104 	bicge.w	r1, r1, #4
 8005660:	6021      	strge	r1, [r4, #0]
 8005662:	b90d      	cbnz	r5, 8005668 <_printf_i+0x118>
 8005664:	2e00      	cmp	r6, #0
 8005666:	d04d      	beq.n	8005704 <_printf_i+0x1b4>
 8005668:	4616      	mov	r6, r2
 800566a:	fbb5 f1f3 	udiv	r1, r5, r3
 800566e:	fb03 5711 	mls	r7, r3, r1, r5
 8005672:	5dc7      	ldrb	r7, [r0, r7]
 8005674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005678:	462f      	mov	r7, r5
 800567a:	42bb      	cmp	r3, r7
 800567c:	460d      	mov	r5, r1
 800567e:	d9f4      	bls.n	800566a <_printf_i+0x11a>
 8005680:	2b08      	cmp	r3, #8
 8005682:	d10b      	bne.n	800569c <_printf_i+0x14c>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07df      	lsls	r7, r3, #31
 8005688:	d508      	bpl.n	800569c <_printf_i+0x14c>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	6861      	ldr	r1, [r4, #4]
 800568e:	4299      	cmp	r1, r3
 8005690:	bfde      	ittt	le
 8005692:	2330      	movle	r3, #48	; 0x30
 8005694:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005698:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800569c:	1b92      	subs	r2, r2, r6
 800569e:	6122      	str	r2, [r4, #16]
 80056a0:	f8cd a000 	str.w	sl, [sp]
 80056a4:	464b      	mov	r3, r9
 80056a6:	aa03      	add	r2, sp, #12
 80056a8:	4621      	mov	r1, r4
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff fee2 	bl	8005474 <_printf_common>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d14c      	bne.n	800574e <_printf_i+0x1fe>
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b8:	b004      	add	sp, #16
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	4835      	ldr	r0, [pc, #212]	; (8005794 <_printf_i+0x244>)
 80056c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	680e      	ldr	r6, [r1, #0]
 80056c8:	061f      	lsls	r7, r3, #24
 80056ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80056ce:	600e      	str	r6, [r1, #0]
 80056d0:	d514      	bpl.n	80056fc <_printf_i+0x1ac>
 80056d2:	07d9      	lsls	r1, r3, #31
 80056d4:	bf44      	itt	mi
 80056d6:	f043 0320 	orrmi.w	r3, r3, #32
 80056da:	6023      	strmi	r3, [r4, #0]
 80056dc:	b91d      	cbnz	r5, 80056e6 <_printf_i+0x196>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f023 0320 	bic.w	r3, r3, #32
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	2310      	movs	r3, #16
 80056e8:	e7b0      	b.n	800564c <_printf_i+0xfc>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	f043 0320 	orr.w	r3, r3, #32
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	2378      	movs	r3, #120	; 0x78
 80056f4:	4828      	ldr	r0, [pc, #160]	; (8005798 <_printf_i+0x248>)
 80056f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056fa:	e7e3      	b.n	80056c4 <_printf_i+0x174>
 80056fc:	065e      	lsls	r6, r3, #25
 80056fe:	bf48      	it	mi
 8005700:	b2ad      	uxthmi	r5, r5
 8005702:	e7e6      	b.n	80056d2 <_printf_i+0x182>
 8005704:	4616      	mov	r6, r2
 8005706:	e7bb      	b.n	8005680 <_printf_i+0x130>
 8005708:	680b      	ldr	r3, [r1, #0]
 800570a:	6826      	ldr	r6, [r4, #0]
 800570c:	6960      	ldr	r0, [r4, #20]
 800570e:	1d1d      	adds	r5, r3, #4
 8005710:	600d      	str	r5, [r1, #0]
 8005712:	0635      	lsls	r5, r6, #24
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	d501      	bpl.n	800571c <_printf_i+0x1cc>
 8005718:	6018      	str	r0, [r3, #0]
 800571a:	e002      	b.n	8005722 <_printf_i+0x1d2>
 800571c:	0671      	lsls	r1, r6, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0x1c8>
 8005720:	8018      	strh	r0, [r3, #0]
 8005722:	2300      	movs	r3, #0
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	4616      	mov	r6, r2
 8005728:	e7ba      	b.n	80056a0 <_printf_i+0x150>
 800572a:	680b      	ldr	r3, [r1, #0]
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	600a      	str	r2, [r1, #0]
 8005730:	681e      	ldr	r6, [r3, #0]
 8005732:	6862      	ldr	r2, [r4, #4]
 8005734:	2100      	movs	r1, #0
 8005736:	4630      	mov	r0, r6
 8005738:	f7fa fd5a 	bl	80001f0 <memchr>
 800573c:	b108      	cbz	r0, 8005742 <_printf_i+0x1f2>
 800573e:	1b80      	subs	r0, r0, r6
 8005740:	6060      	str	r0, [r4, #4]
 8005742:	6863      	ldr	r3, [r4, #4]
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	2300      	movs	r3, #0
 8005748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574c:	e7a8      	b.n	80056a0 <_printf_i+0x150>
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	4632      	mov	r2, r6
 8005752:	4649      	mov	r1, r9
 8005754:	4640      	mov	r0, r8
 8005756:	47d0      	blx	sl
 8005758:	3001      	adds	r0, #1
 800575a:	d0ab      	beq.n	80056b4 <_printf_i+0x164>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	079b      	lsls	r3, r3, #30
 8005760:	d413      	bmi.n	800578a <_printf_i+0x23a>
 8005762:	68e0      	ldr	r0, [r4, #12]
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	4298      	cmp	r0, r3
 8005768:	bfb8      	it	lt
 800576a:	4618      	movlt	r0, r3
 800576c:	e7a4      	b.n	80056b8 <_printf_i+0x168>
 800576e:	2301      	movs	r3, #1
 8005770:	4632      	mov	r2, r6
 8005772:	4649      	mov	r1, r9
 8005774:	4640      	mov	r0, r8
 8005776:	47d0      	blx	sl
 8005778:	3001      	adds	r0, #1
 800577a:	d09b      	beq.n	80056b4 <_printf_i+0x164>
 800577c:	3501      	adds	r5, #1
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	9903      	ldr	r1, [sp, #12]
 8005782:	1a5b      	subs	r3, r3, r1
 8005784:	42ab      	cmp	r3, r5
 8005786:	dcf2      	bgt.n	800576e <_printf_i+0x21e>
 8005788:	e7eb      	b.n	8005762 <_printf_i+0x212>
 800578a:	2500      	movs	r5, #0
 800578c:	f104 0619 	add.w	r6, r4, #25
 8005790:	e7f5      	b.n	800577e <_printf_i+0x22e>
 8005792:	bf00      	nop
 8005794:	080063ad 	.word	0x080063ad
 8005798:	080063be 	.word	0x080063be

0800579c <_sbrk_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d06      	ldr	r5, [pc, #24]	; (80057b8 <_sbrk_r+0x1c>)
 80057a0:	2300      	movs	r3, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	f7fb fcc6 	bl	8001138 <_sbrk>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_sbrk_r+0x1a>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_sbrk_r+0x1a>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20000404 	.word	0x20000404

080057bc <__sread>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	460c      	mov	r4, r1
 80057c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c4:	f000 fab4 	bl	8005d30 <_read_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	bfab      	itete	ge
 80057cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057ce:	89a3      	ldrhlt	r3, [r4, #12]
 80057d0:	181b      	addge	r3, r3, r0
 80057d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057d6:	bfac      	ite	ge
 80057d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80057da:	81a3      	strhlt	r3, [r4, #12]
 80057dc:	bd10      	pop	{r4, pc}

080057de <__swrite>:
 80057de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e2:	461f      	mov	r7, r3
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	05db      	lsls	r3, r3, #23
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	4616      	mov	r6, r2
 80057ee:	d505      	bpl.n	80057fc <__swrite+0x1e>
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	2302      	movs	r3, #2
 80057f6:	2200      	movs	r2, #0
 80057f8:	f000 f9c8 	bl	8005b8c <_lseek_r>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	4632      	mov	r2, r6
 800580a:	463b      	mov	r3, r7
 800580c:	4628      	mov	r0, r5
 800580e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	f000 b869 	b.w	80058e8 <_write_r>

08005816 <__sseek>:
 8005816:	b510      	push	{r4, lr}
 8005818:	460c      	mov	r4, r1
 800581a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581e:	f000 f9b5 	bl	8005b8c <_lseek_r>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	bf15      	itete	ne
 8005828:	6560      	strne	r0, [r4, #84]	; 0x54
 800582a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800582e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005832:	81a3      	strheq	r3, [r4, #12]
 8005834:	bf18      	it	ne
 8005836:	81a3      	strhne	r3, [r4, #12]
 8005838:	bd10      	pop	{r4, pc}

0800583a <__sclose>:
 800583a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583e:	f000 b8d3 	b.w	80059e8 <_close_r>
	...

08005844 <__swbuf_r>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	460e      	mov	r6, r1
 8005848:	4614      	mov	r4, r2
 800584a:	4605      	mov	r5, r0
 800584c:	b118      	cbz	r0, 8005856 <__swbuf_r+0x12>
 800584e:	6983      	ldr	r3, [r0, #24]
 8005850:	b90b      	cbnz	r3, 8005856 <__swbuf_r+0x12>
 8005852:	f7ff fbbb 	bl	8004fcc <__sinit>
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <__swbuf_r+0x98>)
 8005858:	429c      	cmp	r4, r3
 800585a:	d12b      	bne.n	80058b4 <__swbuf_r+0x70>
 800585c:	686c      	ldr	r4, [r5, #4]
 800585e:	69a3      	ldr	r3, [r4, #24]
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	071a      	lsls	r2, r3, #28
 8005866:	d52f      	bpl.n	80058c8 <__swbuf_r+0x84>
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	b36b      	cbz	r3, 80058c8 <__swbuf_r+0x84>
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	1ac0      	subs	r0, r0, r3
 8005872:	6963      	ldr	r3, [r4, #20]
 8005874:	b2f6      	uxtb	r6, r6
 8005876:	4283      	cmp	r3, r0
 8005878:	4637      	mov	r7, r6
 800587a:	dc04      	bgt.n	8005886 <__swbuf_r+0x42>
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f948 	bl	8005b14 <_fflush_r>
 8005884:	bb30      	cbnz	r0, 80058d4 <__swbuf_r+0x90>
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	3b01      	subs	r3, #1
 800588a:	60a3      	str	r3, [r4, #8]
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	6022      	str	r2, [r4, #0]
 8005892:	701e      	strb	r6, [r3, #0]
 8005894:	6963      	ldr	r3, [r4, #20]
 8005896:	3001      	adds	r0, #1
 8005898:	4283      	cmp	r3, r0
 800589a:	d004      	beq.n	80058a6 <__swbuf_r+0x62>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	07db      	lsls	r3, r3, #31
 80058a0:	d506      	bpl.n	80058b0 <__swbuf_r+0x6c>
 80058a2:	2e0a      	cmp	r6, #10
 80058a4:	d104      	bne.n	80058b0 <__swbuf_r+0x6c>
 80058a6:	4621      	mov	r1, r4
 80058a8:	4628      	mov	r0, r5
 80058aa:	f000 f933 	bl	8005b14 <_fflush_r>
 80058ae:	b988      	cbnz	r0, 80058d4 <__swbuf_r+0x90>
 80058b0:	4638      	mov	r0, r7
 80058b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <__swbuf_r+0x9c>)
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d101      	bne.n	80058be <__swbuf_r+0x7a>
 80058ba:	68ac      	ldr	r4, [r5, #8]
 80058bc:	e7cf      	b.n	800585e <__swbuf_r+0x1a>
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <__swbuf_r+0xa0>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	bf08      	it	eq
 80058c4:	68ec      	ldreq	r4, [r5, #12]
 80058c6:	e7ca      	b.n	800585e <__swbuf_r+0x1a>
 80058c8:	4621      	mov	r1, r4
 80058ca:	4628      	mov	r0, r5
 80058cc:	f000 f81e 	bl	800590c <__swsetup_r>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0cb      	beq.n	800586c <__swbuf_r+0x28>
 80058d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058d8:	e7ea      	b.n	80058b0 <__swbuf_r+0x6c>
 80058da:	bf00      	nop
 80058dc:	0800635c 	.word	0x0800635c
 80058e0:	0800637c 	.word	0x0800637c
 80058e4:	0800633c 	.word	0x0800633c

080058e8 <_write_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d07      	ldr	r5, [pc, #28]	; (8005908 <_write_r+0x20>)
 80058ec:	4604      	mov	r4, r0
 80058ee:	4608      	mov	r0, r1
 80058f0:	4611      	mov	r1, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f000 fb00 	bl	8005efc <_write>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_write_r+0x1e>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_write_r+0x1e>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000404 	.word	0x20000404

0800590c <__swsetup_r>:
 800590c:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <__swsetup_r+0xcc>)
 800590e:	b570      	push	{r4, r5, r6, lr}
 8005910:	681d      	ldr	r5, [r3, #0]
 8005912:	4606      	mov	r6, r0
 8005914:	460c      	mov	r4, r1
 8005916:	b125      	cbz	r5, 8005922 <__swsetup_r+0x16>
 8005918:	69ab      	ldr	r3, [r5, #24]
 800591a:	b913      	cbnz	r3, 8005922 <__swsetup_r+0x16>
 800591c:	4628      	mov	r0, r5
 800591e:	f7ff fb55 	bl	8004fcc <__sinit>
 8005922:	4b2e      	ldr	r3, [pc, #184]	; (80059dc <__swsetup_r+0xd0>)
 8005924:	429c      	cmp	r4, r3
 8005926:	d10f      	bne.n	8005948 <__swsetup_r+0x3c>
 8005928:	686c      	ldr	r4, [r5, #4]
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005930:	0719      	lsls	r1, r3, #28
 8005932:	d42c      	bmi.n	800598e <__swsetup_r+0x82>
 8005934:	06dd      	lsls	r5, r3, #27
 8005936:	d411      	bmi.n	800595c <__swsetup_r+0x50>
 8005938:	2309      	movs	r3, #9
 800593a:	6033      	str	r3, [r6, #0]
 800593c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005946:	e03e      	b.n	80059c6 <__swsetup_r+0xba>
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <__swsetup_r+0xd4>)
 800594a:	429c      	cmp	r4, r3
 800594c:	d101      	bne.n	8005952 <__swsetup_r+0x46>
 800594e:	68ac      	ldr	r4, [r5, #8]
 8005950:	e7eb      	b.n	800592a <__swsetup_r+0x1e>
 8005952:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <__swsetup_r+0xd8>)
 8005954:	429c      	cmp	r4, r3
 8005956:	bf08      	it	eq
 8005958:	68ec      	ldreq	r4, [r5, #12]
 800595a:	e7e6      	b.n	800592a <__swsetup_r+0x1e>
 800595c:	0758      	lsls	r0, r3, #29
 800595e:	d512      	bpl.n	8005986 <__swsetup_r+0x7a>
 8005960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005962:	b141      	cbz	r1, 8005976 <__swsetup_r+0x6a>
 8005964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005968:	4299      	cmp	r1, r3
 800596a:	d002      	beq.n	8005972 <__swsetup_r+0x66>
 800596c:	4630      	mov	r0, r6
 800596e:	f000 f98f 	bl	8005c90 <_free_r>
 8005972:	2300      	movs	r3, #0
 8005974:	6363      	str	r3, [r4, #52]	; 0x34
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	2300      	movs	r3, #0
 8005980:	6063      	str	r3, [r4, #4]
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f043 0308 	orr.w	r3, r3, #8
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	b94b      	cbnz	r3, 80059a6 <__swsetup_r+0x9a>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599c:	d003      	beq.n	80059a6 <__swsetup_r+0x9a>
 800599e:	4621      	mov	r1, r4
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f929 	bl	8005bf8 <__smakebuf_r>
 80059a6:	89a0      	ldrh	r0, [r4, #12]
 80059a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059ac:	f010 0301 	ands.w	r3, r0, #1
 80059b0:	d00a      	beq.n	80059c8 <__swsetup_r+0xbc>
 80059b2:	2300      	movs	r3, #0
 80059b4:	60a3      	str	r3, [r4, #8]
 80059b6:	6963      	ldr	r3, [r4, #20]
 80059b8:	425b      	negs	r3, r3
 80059ba:	61a3      	str	r3, [r4, #24]
 80059bc:	6923      	ldr	r3, [r4, #16]
 80059be:	b943      	cbnz	r3, 80059d2 <__swsetup_r+0xc6>
 80059c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059c4:	d1ba      	bne.n	800593c <__swsetup_r+0x30>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	0781      	lsls	r1, r0, #30
 80059ca:	bf58      	it	pl
 80059cc:	6963      	ldrpl	r3, [r4, #20]
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	e7f4      	b.n	80059bc <__swsetup_r+0xb0>
 80059d2:	2000      	movs	r0, #0
 80059d4:	e7f7      	b.n	80059c6 <__swsetup_r+0xba>
 80059d6:	bf00      	nop
 80059d8:	2000000c 	.word	0x2000000c
 80059dc:	0800635c 	.word	0x0800635c
 80059e0:	0800637c 	.word	0x0800637c
 80059e4:	0800633c 	.word	0x0800633c

080059e8 <_close_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d06      	ldr	r5, [pc, #24]	; (8005a04 <_close_r+0x1c>)
 80059ec:	2300      	movs	r3, #0
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	f000 fab4 	bl	8005f60 <_close>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d102      	bne.n	8005a02 <_close_r+0x1a>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	b103      	cbz	r3, 8005a02 <_close_r+0x1a>
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	20000404 	.word	0x20000404

08005a08 <__sflush_r>:
 8005a08:	898a      	ldrh	r2, [r1, #12]
 8005a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	4605      	mov	r5, r0
 8005a10:	0710      	lsls	r0, r2, #28
 8005a12:	460c      	mov	r4, r1
 8005a14:	d458      	bmi.n	8005ac8 <__sflush_r+0xc0>
 8005a16:	684b      	ldr	r3, [r1, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc05      	bgt.n	8005a28 <__sflush_r+0x20>
 8005a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dc02      	bgt.n	8005a28 <__sflush_r+0x20>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a2a:	2e00      	cmp	r6, #0
 8005a2c:	d0f9      	beq.n	8005a22 <__sflush_r+0x1a>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a34:	682f      	ldr	r7, [r5, #0]
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	d032      	beq.n	8005aa0 <__sflush_r+0x98>
 8005a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	075a      	lsls	r2, r3, #29
 8005a40:	d505      	bpl.n	8005a4e <__sflush_r+0x46>
 8005a42:	6863      	ldr	r3, [r4, #4]
 8005a44:	1ac0      	subs	r0, r0, r3
 8005a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a48:	b10b      	cbz	r3, 8005a4e <__sflush_r+0x46>
 8005a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a4c:	1ac0      	subs	r0, r0, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	4602      	mov	r2, r0
 8005a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a54:	6a21      	ldr	r1, [r4, #32]
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b0      	blx	r6
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	d106      	bne.n	8005a6e <__sflush_r+0x66>
 8005a60:	6829      	ldr	r1, [r5, #0]
 8005a62:	291d      	cmp	r1, #29
 8005a64:	d82c      	bhi.n	8005ac0 <__sflush_r+0xb8>
 8005a66:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <__sflush_r+0x108>)
 8005a68:	40ca      	lsrs	r2, r1
 8005a6a:	07d6      	lsls	r6, r2, #31
 8005a6c:	d528      	bpl.n	8005ac0 <__sflush_r+0xb8>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	6062      	str	r2, [r4, #4]
 8005a72:	04d9      	lsls	r1, r3, #19
 8005a74:	6922      	ldr	r2, [r4, #16]
 8005a76:	6022      	str	r2, [r4, #0]
 8005a78:	d504      	bpl.n	8005a84 <__sflush_r+0x7c>
 8005a7a:	1c42      	adds	r2, r0, #1
 8005a7c:	d101      	bne.n	8005a82 <__sflush_r+0x7a>
 8005a7e:	682b      	ldr	r3, [r5, #0]
 8005a80:	b903      	cbnz	r3, 8005a84 <__sflush_r+0x7c>
 8005a82:	6560      	str	r0, [r4, #84]	; 0x54
 8005a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a86:	602f      	str	r7, [r5, #0]
 8005a88:	2900      	cmp	r1, #0
 8005a8a:	d0ca      	beq.n	8005a22 <__sflush_r+0x1a>
 8005a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a90:	4299      	cmp	r1, r3
 8005a92:	d002      	beq.n	8005a9a <__sflush_r+0x92>
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 f8fb 	bl	8005c90 <_free_r>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a9e:	e7c1      	b.n	8005a24 <__sflush_r+0x1c>
 8005aa0:	6a21      	ldr	r1, [r4, #32]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b0      	blx	r6
 8005aa8:	1c41      	adds	r1, r0, #1
 8005aaa:	d1c7      	bne.n	8005a3c <__sflush_r+0x34>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0c4      	beq.n	8005a3c <__sflush_r+0x34>
 8005ab2:	2b1d      	cmp	r3, #29
 8005ab4:	d001      	beq.n	8005aba <__sflush_r+0xb2>
 8005ab6:	2b16      	cmp	r3, #22
 8005ab8:	d101      	bne.n	8005abe <__sflush_r+0xb6>
 8005aba:	602f      	str	r7, [r5, #0]
 8005abc:	e7b1      	b.n	8005a22 <__sflush_r+0x1a>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	e7ad      	b.n	8005a24 <__sflush_r+0x1c>
 8005ac8:	690f      	ldr	r7, [r1, #16]
 8005aca:	2f00      	cmp	r7, #0
 8005acc:	d0a9      	beq.n	8005a22 <__sflush_r+0x1a>
 8005ace:	0793      	lsls	r3, r2, #30
 8005ad0:	680e      	ldr	r6, [r1, #0]
 8005ad2:	bf08      	it	eq
 8005ad4:	694b      	ldreq	r3, [r1, #20]
 8005ad6:	600f      	str	r7, [r1, #0]
 8005ad8:	bf18      	it	ne
 8005ada:	2300      	movne	r3, #0
 8005adc:	eba6 0807 	sub.w	r8, r6, r7
 8005ae0:	608b      	str	r3, [r1, #8]
 8005ae2:	f1b8 0f00 	cmp.w	r8, #0
 8005ae6:	dd9c      	ble.n	8005a22 <__sflush_r+0x1a>
 8005ae8:	6a21      	ldr	r1, [r4, #32]
 8005aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aec:	4643      	mov	r3, r8
 8005aee:	463a      	mov	r2, r7
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b0      	blx	r6
 8005af4:	2800      	cmp	r0, #0
 8005af6:	dc06      	bgt.n	8005b06 <__sflush_r+0xfe>
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b04:	e78e      	b.n	8005a24 <__sflush_r+0x1c>
 8005b06:	4407      	add	r7, r0
 8005b08:	eba8 0800 	sub.w	r8, r8, r0
 8005b0c:	e7e9      	b.n	8005ae2 <__sflush_r+0xda>
 8005b0e:	bf00      	nop
 8005b10:	20400001 	.word	0x20400001

08005b14 <_fflush_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	690b      	ldr	r3, [r1, #16]
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b913      	cbnz	r3, 8005b24 <_fflush_r+0x10>
 8005b1e:	2500      	movs	r5, #0
 8005b20:	4628      	mov	r0, r5
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	b118      	cbz	r0, 8005b2e <_fflush_r+0x1a>
 8005b26:	6983      	ldr	r3, [r0, #24]
 8005b28:	b90b      	cbnz	r3, 8005b2e <_fflush_r+0x1a>
 8005b2a:	f7ff fa4f 	bl	8004fcc <__sinit>
 8005b2e:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <_fflush_r+0x6c>)
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d11b      	bne.n	8005b6c <_fflush_r+0x58>
 8005b34:	686c      	ldr	r4, [r5, #4]
 8005b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ef      	beq.n	8005b1e <_fflush_r+0xa>
 8005b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b40:	07d0      	lsls	r0, r2, #31
 8005b42:	d404      	bmi.n	8005b4e <_fflush_r+0x3a>
 8005b44:	0599      	lsls	r1, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_fflush_r+0x3a>
 8005b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4a:	f7ff fadd 	bl	8005108 <__retarget_lock_acquire_recursive>
 8005b4e:	4628      	mov	r0, r5
 8005b50:	4621      	mov	r1, r4
 8005b52:	f7ff ff59 	bl	8005a08 <__sflush_r>
 8005b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b58:	07da      	lsls	r2, r3, #31
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	d4e0      	bmi.n	8005b20 <_fflush_r+0xc>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	059b      	lsls	r3, r3, #22
 8005b62:	d4dd      	bmi.n	8005b20 <_fflush_r+0xc>
 8005b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b66:	f7ff fad0 	bl	800510a <__retarget_lock_release_recursive>
 8005b6a:	e7d9      	b.n	8005b20 <_fflush_r+0xc>
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <_fflush_r+0x70>)
 8005b6e:	429c      	cmp	r4, r3
 8005b70:	d101      	bne.n	8005b76 <_fflush_r+0x62>
 8005b72:	68ac      	ldr	r4, [r5, #8]
 8005b74:	e7df      	b.n	8005b36 <_fflush_r+0x22>
 8005b76:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <_fflush_r+0x74>)
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	bf08      	it	eq
 8005b7c:	68ec      	ldreq	r4, [r5, #12]
 8005b7e:	e7da      	b.n	8005b36 <_fflush_r+0x22>
 8005b80:	0800635c 	.word	0x0800635c
 8005b84:	0800637c 	.word	0x0800637c
 8005b88:	0800633c 	.word	0x0800633c

08005b8c <_lseek_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d07      	ldr	r5, [pc, #28]	; (8005bac <_lseek_r+0x20>)
 8005b90:	4604      	mov	r4, r0
 8005b92:	4608      	mov	r0, r1
 8005b94:	4611      	mov	r1, r2
 8005b96:	2200      	movs	r2, #0
 8005b98:	602a      	str	r2, [r5, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f000 f99c 	bl	8005ed8 <_lseek>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_lseek_r+0x1e>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_lseek_r+0x1e>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	20000404 	.word	0x20000404

08005bb0 <__swhatbuf_r>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	460e      	mov	r6, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	b096      	sub	sp, #88	; 0x58
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	da07      	bge.n	8005bd2 <__swhatbuf_r+0x22>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	89b3      	ldrh	r3, [r6, #12]
 8005bc8:	061a      	lsls	r2, r3, #24
 8005bca:	d410      	bmi.n	8005bee <__swhatbuf_r+0x3e>
 8005bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd0:	e00e      	b.n	8005bf0 <__swhatbuf_r+0x40>
 8005bd2:	466a      	mov	r2, sp
 8005bd4:	f000 f8be 	bl	8005d54 <_fstat_r>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	dbf2      	blt.n	8005bc2 <__swhatbuf_r+0x12>
 8005bdc:	9a01      	ldr	r2, [sp, #4]
 8005bde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005be2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005be6:	425a      	negs	r2, r3
 8005be8:	415a      	adcs	r2, r3
 8005bea:	602a      	str	r2, [r5, #0]
 8005bec:	e7ee      	b.n	8005bcc <__swhatbuf_r+0x1c>
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	b016      	add	sp, #88	; 0x58
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}

08005bf8 <__smakebuf_r>:
 8005bf8:	898b      	ldrh	r3, [r1, #12]
 8005bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bfc:	079d      	lsls	r5, r3, #30
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	d507      	bpl.n	8005c14 <__smakebuf_r+0x1c>
 8005c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	6163      	str	r3, [r4, #20]
 8005c10:	b002      	add	sp, #8
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	ab01      	add	r3, sp, #4
 8005c16:	466a      	mov	r2, sp
 8005c18:	f7ff ffca 	bl	8005bb0 <__swhatbuf_r>
 8005c1c:	9900      	ldr	r1, [sp, #0]
 8005c1e:	4605      	mov	r5, r0
 8005c20:	4630      	mov	r0, r6
 8005c22:	f7ff fa73 	bl	800510c <_malloc_r>
 8005c26:	b948      	cbnz	r0, 8005c3c <__smakebuf_r+0x44>
 8005c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2c:	059a      	lsls	r2, r3, #22
 8005c2e:	d4ef      	bmi.n	8005c10 <__smakebuf_r+0x18>
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	f043 0302 	orr.w	r3, r3, #2
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	e7e3      	b.n	8005c04 <__smakebuf_r+0xc>
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <__smakebuf_r+0x7c>)
 8005c3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	6020      	str	r0, [r4, #0]
 8005c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	9b00      	ldr	r3, [sp, #0]
 8005c4c:	6163      	str	r3, [r4, #20]
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	6120      	str	r0, [r4, #16]
 8005c52:	b15b      	cbz	r3, 8005c6c <__smakebuf_r+0x74>
 8005c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 f88d 	bl	8005d78 <_isatty_r>
 8005c5e:	b128      	cbz	r0, 8005c6c <__smakebuf_r+0x74>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	89a0      	ldrh	r0, [r4, #12]
 8005c6e:	4305      	orrs	r5, r0
 8005c70:	81a5      	strh	r5, [r4, #12]
 8005c72:	e7cd      	b.n	8005c10 <__smakebuf_r+0x18>
 8005c74:	08004f65 	.word	0x08004f65

08005c78 <__malloc_lock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_lock+0x8>)
 8005c7a:	f7ff ba45 	b.w	8005108 <__retarget_lock_acquire_recursive>
 8005c7e:	bf00      	nop
 8005c80:	200003fc 	.word	0x200003fc

08005c84 <__malloc_unlock>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__malloc_unlock+0x8>)
 8005c86:	f7ff ba40 	b.w	800510a <__retarget_lock_release_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	200003fc 	.word	0x200003fc

08005c90 <_free_r>:
 8005c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c92:	2900      	cmp	r1, #0
 8005c94:	d048      	beq.n	8005d28 <_free_r+0x98>
 8005c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9a:	9001      	str	r0, [sp, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ca2:	bfb8      	it	lt
 8005ca4:	18e4      	addlt	r4, r4, r3
 8005ca6:	f7ff ffe7 	bl	8005c78 <__malloc_lock>
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <_free_r+0x9c>)
 8005cac:	9801      	ldr	r0, [sp, #4]
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	b933      	cbnz	r3, 8005cc2 <_free_r+0x32>
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6014      	str	r4, [r2, #0]
 8005cb8:	b003      	add	sp, #12
 8005cba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cbe:	f7ff bfe1 	b.w	8005c84 <__malloc_unlock>
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	d90b      	bls.n	8005cde <_free_r+0x4e>
 8005cc6:	6821      	ldr	r1, [r4, #0]
 8005cc8:	1862      	adds	r2, r4, r1
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bf04      	itt	eq
 8005cce:	681a      	ldreq	r2, [r3, #0]
 8005cd0:	685b      	ldreq	r3, [r3, #4]
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	bf04      	itt	eq
 8005cd6:	1852      	addeq	r2, r2, r1
 8005cd8:	6022      	streq	r2, [r4, #0]
 8005cda:	602c      	str	r4, [r5, #0]
 8005cdc:	e7ec      	b.n	8005cb8 <_free_r+0x28>
 8005cde:	461a      	mov	r2, r3
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	b10b      	cbz	r3, 8005ce8 <_free_r+0x58>
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	d9fa      	bls.n	8005cde <_free_r+0x4e>
 8005ce8:	6811      	ldr	r1, [r2, #0]
 8005cea:	1855      	adds	r5, r2, r1
 8005cec:	42a5      	cmp	r5, r4
 8005cee:	d10b      	bne.n	8005d08 <_free_r+0x78>
 8005cf0:	6824      	ldr	r4, [r4, #0]
 8005cf2:	4421      	add	r1, r4
 8005cf4:	1854      	adds	r4, r2, r1
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	d1dd      	bne.n	8005cb8 <_free_r+0x28>
 8005cfc:	681c      	ldr	r4, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	6053      	str	r3, [r2, #4]
 8005d02:	4421      	add	r1, r4
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	e7d7      	b.n	8005cb8 <_free_r+0x28>
 8005d08:	d902      	bls.n	8005d10 <_free_r+0x80>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	6003      	str	r3, [r0, #0]
 8005d0e:	e7d3      	b.n	8005cb8 <_free_r+0x28>
 8005d10:	6825      	ldr	r5, [r4, #0]
 8005d12:	1961      	adds	r1, r4, r5
 8005d14:	428b      	cmp	r3, r1
 8005d16:	bf04      	itt	eq
 8005d18:	6819      	ldreq	r1, [r3, #0]
 8005d1a:	685b      	ldreq	r3, [r3, #4]
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	bf04      	itt	eq
 8005d20:	1949      	addeq	r1, r1, r5
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	6054      	str	r4, [r2, #4]
 8005d26:	e7c7      	b.n	8005cb8 <_free_r+0x28>
 8005d28:	b003      	add	sp, #12
 8005d2a:	bd30      	pop	{r4, r5, pc}
 8005d2c:	200000a4 	.word	0x200000a4

08005d30 <_read_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	; (8005d50 <_read_r+0x20>)
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 f872 	bl	8005e28 <_read>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_read_r+0x1e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_read_r+0x1e>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20000404 	.word	0x20000404

08005d54 <_fstat_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_fstat_r+0x20>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	f000 f944 	bl	8005fee <_fstat>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d102      	bne.n	8005d70 <_fstat_r+0x1c>
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	b103      	cbz	r3, 8005d70 <_fstat_r+0x1c>
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	bf00      	nop
 8005d74:	20000404 	.word	0x20000404

08005d78 <_isatty_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_isatty_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f000 fa98 	bl	80062b8 <_isatty>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_isatty_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_isatty_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000404 	.word	0x20000404

08005d98 <findslot>:
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <findslot+0x2c>)
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	b118      	cbz	r0, 8005daa <findslot+0x12>
 8005da2:	6983      	ldr	r3, [r0, #24]
 8005da4:	b90b      	cbnz	r3, 8005daa <findslot+0x12>
 8005da6:	f7ff f911 	bl	8004fcc <__sinit>
 8005daa:	2c13      	cmp	r4, #19
 8005dac:	d807      	bhi.n	8005dbe <findslot+0x26>
 8005dae:	4806      	ldr	r0, [pc, #24]	; (8005dc8 <findslot+0x30>)
 8005db0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005db4:	3201      	adds	r2, #1
 8005db6:	d002      	beq.n	8005dbe <findslot+0x26>
 8005db8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e7fc      	b.n	8005dbc <findslot+0x24>
 8005dc2:	bf00      	nop
 8005dc4:	2000000c 	.word	0x2000000c
 8005dc8:	200000b8 	.word	0x200000b8

08005dcc <checkerror>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	d109      	bne.n	8005de8 <checkerror+0x1c>
 8005dd4:	f7ff f858 	bl	8004e88 <__errno>
 8005dd8:	2613      	movs	r6, #19
 8005dda:	4605      	mov	r5, r0
 8005ddc:	2700      	movs	r7, #0
 8005dde:	4630      	mov	r0, r6
 8005de0:	4639      	mov	r1, r7
 8005de2:	beab      	bkpt	0x00ab
 8005de4:	4606      	mov	r6, r0
 8005de6:	602e      	str	r6, [r5, #0]
 8005de8:	4620      	mov	r0, r4
 8005dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005dec <error>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	4604      	mov	r4, r0
 8005df0:	f7ff f84a 	bl	8004e88 <__errno>
 8005df4:	2613      	movs	r6, #19
 8005df6:	4605      	mov	r5, r0
 8005df8:	2700      	movs	r7, #0
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	beab      	bkpt	0x00ab
 8005e00:	4606      	mov	r6, r0
 8005e02:	602e      	str	r6, [r5, #0]
 8005e04:	4620      	mov	r0, r4
 8005e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e08 <_swiread>:
 8005e08:	b530      	push	{r4, r5, lr}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005e10:	9203      	str	r2, [sp, #12]
 8005e12:	2406      	movs	r4, #6
 8005e14:	ad01      	add	r5, sp, #4
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	beab      	bkpt	0x00ab
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7ff ffd4 	bl	8005dcc <checkerror>
 8005e24:	b005      	add	sp, #20
 8005e26:	bd30      	pop	{r4, r5, pc}

08005e28 <_read>:
 8005e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e2a:	4615      	mov	r5, r2
 8005e2c:	9101      	str	r1, [sp, #4]
 8005e2e:	f7ff ffb3 	bl	8005d98 <findslot>
 8005e32:	9901      	ldr	r1, [sp, #4]
 8005e34:	4604      	mov	r4, r0
 8005e36:	b938      	cbnz	r0, 8005e48 <_read+0x20>
 8005e38:	f7ff f826 	bl	8004e88 <__errno>
 8005e3c:	2309      	movs	r3, #9
 8005e3e:	6003      	str	r3, [r0, #0]
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e44:	b003      	add	sp, #12
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	6800      	ldr	r0, [r0, #0]
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	f7ff ffdc 	bl	8005e08 <_swiread>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d0f7      	beq.n	8005e44 <_read+0x1c>
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	1a2a      	subs	r2, r5, r0
 8005e58:	4413      	add	r3, r2
 8005e5a:	6063      	str	r3, [r4, #4]
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	e7f1      	b.n	8005e44 <_read+0x1c>

08005e60 <_swilseek>:
 8005e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e62:	460c      	mov	r4, r1
 8005e64:	4616      	mov	r6, r2
 8005e66:	f7ff ff97 	bl	8005d98 <findslot>
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	b940      	cbnz	r0, 8005e80 <_swilseek+0x20>
 8005e6e:	f7ff f80b 	bl	8004e88 <__errno>
 8005e72:	2309      	movs	r3, #9
 8005e74:	6003      	str	r3, [r0, #0]
 8005e76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	b003      	add	sp, #12
 8005e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e80:	2e02      	cmp	r6, #2
 8005e82:	d903      	bls.n	8005e8c <_swilseek+0x2c>
 8005e84:	f7ff f800 	bl	8004e88 <__errno>
 8005e88:	2316      	movs	r3, #22
 8005e8a:	e7f3      	b.n	8005e74 <_swilseek+0x14>
 8005e8c:	2e01      	cmp	r6, #1
 8005e8e:	d112      	bne.n	8005eb6 <_swilseek+0x56>
 8005e90:	6843      	ldr	r3, [r0, #4]
 8005e92:	18e4      	adds	r4, r4, r3
 8005e94:	d4f6      	bmi.n	8005e84 <_swilseek+0x24>
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	260a      	movs	r6, #10
 8005e9a:	e9cd 3400 	strd	r3, r4, [sp]
 8005e9e:	466f      	mov	r7, sp
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	beab      	bkpt	0x00ab
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ff8f 	bl	8005dcc <checkerror>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	dbe1      	blt.n	8005e76 <_swilseek+0x16>
 8005eb2:	606c      	str	r4, [r5, #4]
 8005eb4:	e7e1      	b.n	8005e7a <_swilseek+0x1a>
 8005eb6:	2e02      	cmp	r6, #2
 8005eb8:	d1ed      	bne.n	8005e96 <_swilseek+0x36>
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	260c      	movs	r6, #12
 8005ec0:	466f      	mov	r7, sp
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	beab      	bkpt	0x00ab
 8005ec8:	4606      	mov	r6, r0
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7ff ff7e 	bl	8005dcc <checkerror>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d0d0      	beq.n	8005e76 <_swilseek+0x16>
 8005ed4:	4404      	add	r4, r0
 8005ed6:	e7de      	b.n	8005e96 <_swilseek+0x36>

08005ed8 <_lseek>:
 8005ed8:	f7ff bfc2 	b.w	8005e60 <_swilseek>

08005edc <_swiwrite>:
 8005edc:	b530      	push	{r4, r5, lr}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005ee4:	9203      	str	r2, [sp, #12]
 8005ee6:	2405      	movs	r4, #5
 8005ee8:	ad01      	add	r5, sp, #4
 8005eea:	4620      	mov	r0, r4
 8005eec:	4629      	mov	r1, r5
 8005eee:	beab      	bkpt	0x00ab
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff ff6a 	bl	8005dcc <checkerror>
 8005ef8:	b005      	add	sp, #20
 8005efa:	bd30      	pop	{r4, r5, pc}

08005efc <_write>:
 8005efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005efe:	4615      	mov	r5, r2
 8005f00:	9101      	str	r1, [sp, #4]
 8005f02:	f7ff ff49 	bl	8005d98 <findslot>
 8005f06:	9901      	ldr	r1, [sp, #4]
 8005f08:	4604      	mov	r4, r0
 8005f0a:	b930      	cbnz	r0, 8005f1a <_write+0x1e>
 8005f0c:	f7fe ffbc 	bl	8004e88 <__errno>
 8005f10:	2309      	movs	r3, #9
 8005f12:	6003      	str	r3, [r0, #0]
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f18:	e012      	b.n	8005f40 <_write+0x44>
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	f7ff ffdd 	bl	8005edc <_swiwrite>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	dbf6      	blt.n	8005f14 <_write+0x18>
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	1a2b      	subs	r3, r5, r0
 8005f2a:	441a      	add	r2, r3
 8005f2c:	42a8      	cmp	r0, r5
 8005f2e:	6062      	str	r2, [r4, #4]
 8005f30:	d105      	bne.n	8005f3e <_write+0x42>
 8005f32:	2000      	movs	r0, #0
 8005f34:	b003      	add	sp, #12
 8005f36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f3a:	f7ff bf57 	b.w	8005dec <error>
 8005f3e:	4618      	mov	r0, r3
 8005f40:	b003      	add	sp, #12
 8005f42:	bd30      	pop	{r4, r5, pc}

08005f44 <_swiclose>:
 8005f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f46:	2402      	movs	r4, #2
 8005f48:	9001      	str	r0, [sp, #4]
 8005f4a:	ad01      	add	r5, sp, #4
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	beab      	bkpt	0x00ab
 8005f52:	4604      	mov	r4, r0
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ff39 	bl	8005dcc <checkerror>
 8005f5a:	b003      	add	sp, #12
 8005f5c:	bd30      	pop	{r4, r5, pc}
	...

08005f60 <_close>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4605      	mov	r5, r0
 8005f64:	f7ff ff18 	bl	8005d98 <findslot>
 8005f68:	4604      	mov	r4, r0
 8005f6a:	b930      	cbnz	r0, 8005f7a <_close+0x1a>
 8005f6c:	f7fe ff8c 	bl	8004e88 <__errno>
 8005f70:	2309      	movs	r3, #9
 8005f72:	6003      	str	r3, [r0, #0]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	3d01      	subs	r5, #1
 8005f7c:	2d01      	cmp	r5, #1
 8005f7e:	d809      	bhi.n	8005f94 <_close+0x34>
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <_close+0x48>)
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d104      	bne.n	8005f94 <_close+0x34>
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f8e:	6003      	str	r3, [r0, #0]
 8005f90:	2000      	movs	r0, #0
 8005f92:	e7f1      	b.n	8005f78 <_close+0x18>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	f7ff ffd5 	bl	8005f44 <_swiclose>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d1ec      	bne.n	8005f78 <_close+0x18>
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	e7e8      	b.n	8005f78 <_close+0x18>
 8005fa6:	bf00      	nop
 8005fa8:	200000b8 	.word	0x200000b8

08005fac <_swistat>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	460c      	mov	r4, r1
 8005fb0:	f7ff fef2 	bl	8005d98 <findslot>
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	b930      	cbnz	r0, 8005fc6 <_swistat+0x1a>
 8005fb8:	f7fe ff66 	bl	8004e88 <__errno>
 8005fbc:	2309      	movs	r3, #9
 8005fbe:	6003      	str	r3, [r0, #0]
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc4:	bd70      	pop	{r4, r5, r6, pc}
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fd2:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fd4:	260c      	movs	r6, #12
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	4629      	mov	r1, r5
 8005fda:	beab      	bkpt	0x00ab
 8005fdc:	4605      	mov	r5, r0
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7ff fef4 	bl	8005dcc <checkerror>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	bf1c      	itt	ne
 8005fe8:	6120      	strne	r0, [r4, #16]
 8005fea:	2000      	movne	r0, #0
 8005fec:	e7ea      	b.n	8005fc4 <_swistat+0x18>

08005fee <_fstat>:
 8005fee:	460b      	mov	r3, r1
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	2258      	movs	r2, #88	; 0x58
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe ff6f 	bl	8004edc <memset>
 8005ffe:	4601      	mov	r1, r0
 8006000:	4620      	mov	r0, r4
 8006002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006006:	f7ff bfd1 	b.w	8005fac <_swistat>

0800600a <_stat>:
 800600a:	b538      	push	{r3, r4, r5, lr}
 800600c:	460d      	mov	r5, r1
 800600e:	4604      	mov	r4, r0
 8006010:	2258      	movs	r2, #88	; 0x58
 8006012:	2100      	movs	r1, #0
 8006014:	4628      	mov	r0, r5
 8006016:	f7fe ff61 	bl	8004edc <memset>
 800601a:	4620      	mov	r0, r4
 800601c:	2100      	movs	r1, #0
 800601e:	f000 f811 	bl	8006044 <_swiopen>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	4604      	mov	r4, r0
 8006026:	d00b      	beq.n	8006040 <_stat+0x36>
 8006028:	686b      	ldr	r3, [r5, #4]
 800602a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800602e:	606b      	str	r3, [r5, #4]
 8006030:	4629      	mov	r1, r5
 8006032:	f7ff ffbb 	bl	8005fac <_swistat>
 8006036:	4605      	mov	r5, r0
 8006038:	4620      	mov	r0, r4
 800603a:	f7ff ff91 	bl	8005f60 <_close>
 800603e:	462c      	mov	r4, r5
 8006040:	4620      	mov	r0, r4
 8006042:	bd38      	pop	{r3, r4, r5, pc}

08006044 <_swiopen>:
 8006044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006048:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <_swiopen+0xb0>)
 800604a:	b097      	sub	sp, #92	; 0x5c
 800604c:	4681      	mov	r9, r0
 800604e:	460f      	mov	r7, r1
 8006050:	2500      	movs	r5, #0
 8006052:	461e      	mov	r6, r3
 8006054:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8006058:	1c61      	adds	r1, r4, #1
 800605a:	d037      	beq.n	80060cc <_swiopen+0x88>
 800605c:	3501      	adds	r5, #1
 800605e:	2d14      	cmp	r5, #20
 8006060:	d1f8      	bne.n	8006054 <_swiopen+0x10>
 8006062:	f7fe ff11 	bl	8004e88 <__errno>
 8006066:	2318      	movs	r3, #24
 8006068:	6003      	str	r3, [r0, #0]
 800606a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800606e:	e03d      	b.n	80060ec <_swiopen+0xa8>
 8006070:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8006074:	f240 6301 	movw	r3, #1537	; 0x601
 8006078:	07ba      	lsls	r2, r7, #30
 800607a:	bf48      	it	mi
 800607c:	f044 0402 	orrmi.w	r4, r4, #2
 8006080:	421f      	tst	r7, r3
 8006082:	bf18      	it	ne
 8006084:	f044 0404 	orrne.w	r4, r4, #4
 8006088:	073b      	lsls	r3, r7, #28
 800608a:	bf48      	it	mi
 800608c:	f024 0404 	bicmi.w	r4, r4, #4
 8006090:	4648      	mov	r0, r9
 8006092:	bf48      	it	mi
 8006094:	f044 0408 	orrmi.w	r4, r4, #8
 8006098:	f8cd 9000 	str.w	r9, [sp]
 800609c:	f7fa f8f8 	bl	8000290 <strlen>
 80060a0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80060a4:	2401      	movs	r4, #1
 80060a6:	4620      	mov	r0, r4
 80060a8:	4641      	mov	r1, r8
 80060aa:	beab      	bkpt	0x00ab
 80060ac:	4604      	mov	r4, r0
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	db07      	blt.n	80060c2 <_swiopen+0x7e>
 80060b2:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 80060b6:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80060ba:	2300      	movs	r3, #0
 80060bc:	6073      	str	r3, [r6, #4]
 80060be:	462c      	mov	r4, r5
 80060c0:	e014      	b.n	80060ec <_swiopen+0xa8>
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff fe92 	bl	8005dec <error>
 80060c8:	4604      	mov	r4, r0
 80060ca:	e00f      	b.n	80060ec <_swiopen+0xa8>
 80060cc:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 80060d0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80060d4:	46e8      	mov	r8, sp
 80060d6:	d1cb      	bne.n	8006070 <_swiopen+0x2c>
 80060d8:	4641      	mov	r1, r8
 80060da:	4648      	mov	r0, r9
 80060dc:	f7ff ff95 	bl	800600a <_stat>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d0c5      	beq.n	8006070 <_swiopen+0x2c>
 80060e4:	f7fe fed0 	bl	8004e88 <__errno>
 80060e8:	2311      	movs	r3, #17
 80060ea:	6003      	str	r3, [r0, #0]
 80060ec:	4620      	mov	r0, r4
 80060ee:	b017      	add	sp, #92	; 0x5c
 80060f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f4:	200000b8 	.word	0x200000b8

080060f8 <_get_semihosting_exts>:
 80060f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	482a      	ldr	r0, [pc, #168]	; (80061ac <_get_semihosting_exts+0xb4>)
 8006102:	2100      	movs	r1, #0
 8006104:	4615      	mov	r5, r2
 8006106:	f7ff ff9d 	bl	8006044 <_swiopen>
 800610a:	462a      	mov	r2, r5
 800610c:	4604      	mov	r4, r0
 800610e:	2100      	movs	r1, #0
 8006110:	4630      	mov	r0, r6
 8006112:	f7fe fee3 	bl	8004edc <memset>
 8006116:	1c63      	adds	r3, r4, #1
 8006118:	d016      	beq.n	8006148 <_get_semihosting_exts+0x50>
 800611a:	4620      	mov	r0, r4
 800611c:	f7ff fe3c 	bl	8005d98 <findslot>
 8006120:	f04f 090c 	mov.w	r9, #12
 8006124:	4680      	mov	r8, r0
 8006126:	4648      	mov	r0, r9
 8006128:	4641      	mov	r1, r8
 800612a:	beab      	bkpt	0x00ab
 800612c:	4680      	mov	r8, r0
 800612e:	4640      	mov	r0, r8
 8006130:	f7ff fe4c 	bl	8005dcc <checkerror>
 8006134:	2803      	cmp	r0, #3
 8006136:	dd02      	ble.n	800613e <_get_semihosting_exts+0x46>
 8006138:	1ec3      	subs	r3, r0, #3
 800613a:	42ab      	cmp	r3, r5
 800613c:	dc08      	bgt.n	8006150 <_get_semihosting_exts+0x58>
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff0e 	bl	8005f60 <_close>
 8006144:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006148:	4620      	mov	r0, r4
 800614a:	b003      	add	sp, #12
 800614c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006150:	2204      	movs	r2, #4
 8006152:	eb0d 0102 	add.w	r1, sp, r2
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff fe66 	bl	8005e28 <_read>
 800615c:	2803      	cmp	r0, #3
 800615e:	ddee      	ble.n	800613e <_get_semihosting_exts+0x46>
 8006160:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006164:	2b53      	cmp	r3, #83	; 0x53
 8006166:	d1ea      	bne.n	800613e <_get_semihosting_exts+0x46>
 8006168:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800616c:	2b48      	cmp	r3, #72	; 0x48
 800616e:	d1e6      	bne.n	800613e <_get_semihosting_exts+0x46>
 8006170:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006174:	2b46      	cmp	r3, #70	; 0x46
 8006176:	d1e2      	bne.n	800613e <_get_semihosting_exts+0x46>
 8006178:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800617c:	2b42      	cmp	r3, #66	; 0x42
 800617e:	d1de      	bne.n	800613e <_get_semihosting_exts+0x46>
 8006180:	2201      	movs	r2, #1
 8006182:	4639      	mov	r1, r7
 8006184:	4620      	mov	r0, r4
 8006186:	f7ff fe6b 	bl	8005e60 <_swilseek>
 800618a:	2800      	cmp	r0, #0
 800618c:	dbd7      	blt.n	800613e <_get_semihosting_exts+0x46>
 800618e:	462a      	mov	r2, r5
 8006190:	4631      	mov	r1, r6
 8006192:	4620      	mov	r0, r4
 8006194:	f7ff fe48 	bl	8005e28 <_read>
 8006198:	4605      	mov	r5, r0
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff fee0 	bl	8005f60 <_close>
 80061a0:	4628      	mov	r0, r5
 80061a2:	f7ff fe13 	bl	8005dcc <checkerror>
 80061a6:	4604      	mov	r4, r0
 80061a8:	e7ce      	b.n	8006148 <_get_semihosting_exts+0x50>
 80061aa:	bf00      	nop
 80061ac:	080063cf 	.word	0x080063cf

080061b0 <initialise_semihosting_exts>:
 80061b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061b2:	4d0a      	ldr	r5, [pc, #40]	; (80061dc <initialise_semihosting_exts+0x2c>)
 80061b4:	4c0a      	ldr	r4, [pc, #40]	; (80061e0 <initialise_semihosting_exts+0x30>)
 80061b6:	2100      	movs	r1, #0
 80061b8:	2201      	movs	r2, #1
 80061ba:	a801      	add	r0, sp, #4
 80061bc:	6029      	str	r1, [r5, #0]
 80061be:	6022      	str	r2, [r4, #0]
 80061c0:	f7ff ff9a 	bl	80060f8 <_get_semihosting_exts>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	dd07      	ble.n	80061d8 <initialise_semihosting_exts+0x28>
 80061c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80061cc:	f003 0201 	and.w	r2, r3, #1
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	602a      	str	r2, [r5, #0]
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	b003      	add	sp, #12
 80061da:	bd30      	pop	{r4, r5, pc}
 80061dc:	20000070 	.word	0x20000070
 80061e0:	20000074 	.word	0x20000074

080061e4 <_has_ext_stdout_stderr>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4c04      	ldr	r4, [pc, #16]	; (80061f8 <_has_ext_stdout_stderr+0x14>)
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	da01      	bge.n	80061f2 <_has_ext_stdout_stderr+0xe>
 80061ee:	f7ff ffdf 	bl	80061b0 <initialise_semihosting_exts>
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	bf00      	nop
 80061f8:	20000074 	.word	0x20000074

080061fc <initialise_monitor_handles>:
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	b085      	sub	sp, #20
 8006202:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80062b4 <initialise_monitor_handles+0xb8>
 8006206:	f8cd 9004 	str.w	r9, [sp, #4]
 800620a:	2303      	movs	r3, #3
 800620c:	2400      	movs	r4, #0
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	f10d 0804 	add.w	r8, sp, #4
 8006214:	9402      	str	r4, [sp, #8]
 8006216:	2501      	movs	r5, #1
 8006218:	4628      	mov	r0, r5
 800621a:	4641      	mov	r1, r8
 800621c:	beab      	bkpt	0x00ab
 800621e:	4605      	mov	r5, r0
 8006220:	4e20      	ldr	r6, [pc, #128]	; (80062a4 <initialise_monitor_handles+0xa8>)
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <initialise_monitor_handles+0xac>)
 8006224:	6035      	str	r5, [r6, #0]
 8006226:	4623      	mov	r3, r4
 8006228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800622c:	4614      	mov	r4, r2
 800622e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8006232:	3301      	adds	r3, #1
 8006234:	2b14      	cmp	r3, #20
 8006236:	d1fa      	bne.n	800622e <initialise_monitor_handles+0x32>
 8006238:	f7ff ffd4 	bl	80061e4 <_has_ext_stdout_stderr>
 800623c:	4d1b      	ldr	r5, [pc, #108]	; (80062ac <initialise_monitor_handles+0xb0>)
 800623e:	b1d0      	cbz	r0, 8006276 <initialise_monitor_handles+0x7a>
 8006240:	f04f 0a03 	mov.w	sl, #3
 8006244:	2304      	movs	r3, #4
 8006246:	f8cd 9004 	str.w	r9, [sp, #4]
 800624a:	2701      	movs	r7, #1
 800624c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006250:	9302      	str	r3, [sp, #8]
 8006252:	4638      	mov	r0, r7
 8006254:	4641      	mov	r1, r8
 8006256:	beab      	bkpt	0x00ab
 8006258:	4683      	mov	fp, r0
 800625a:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <initialise_monitor_handles+0xb4>)
 800625c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006260:	f8c3 b000 	str.w	fp, [r3]
 8006264:	2308      	movs	r3, #8
 8006266:	f8cd a00c 	str.w	sl, [sp, #12]
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	4638      	mov	r0, r7
 800626e:	4641      	mov	r1, r8
 8006270:	beab      	bkpt	0x00ab
 8006272:	4607      	mov	r7, r0
 8006274:	602f      	str	r7, [r5, #0]
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	bf02      	ittt	eq
 800627c:	4b0c      	ldreq	r3, [pc, #48]	; (80062b0 <initialise_monitor_handles+0xb4>)
 800627e:	681b      	ldreq	r3, [r3, #0]
 8006280:	602b      	streq	r3, [r5, #0]
 8006282:	6833      	ldr	r3, [r6, #0]
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	2600      	movs	r6, #0
 8006288:	6066      	str	r6, [r4, #4]
 800628a:	f7ff ffab 	bl	80061e4 <_has_ext_stdout_stderr>
 800628e:	b130      	cbz	r0, 800629e <initialise_monitor_handles+0xa2>
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <initialise_monitor_handles+0xb4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800629e:	b005      	add	sp, #20
 80062a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a4:	200000b0 	.word	0x200000b0
 80062a8:	200000b8 	.word	0x200000b8
 80062ac:	200000ac 	.word	0x200000ac
 80062b0:	200000b4 	.word	0x200000b4
 80062b4:	080063e5 	.word	0x080063e5

080062b8 <_isatty>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	f7ff fd6d 	bl	8005d98 <findslot>
 80062be:	2509      	movs	r5, #9
 80062c0:	4604      	mov	r4, r0
 80062c2:	b920      	cbnz	r0, 80062ce <_isatty+0x16>
 80062c4:	f7fe fde0 	bl	8004e88 <__errno>
 80062c8:	6005      	str	r5, [r0, #0]
 80062ca:	4620      	mov	r0, r4
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
 80062ce:	4628      	mov	r0, r5
 80062d0:	4621      	mov	r1, r4
 80062d2:	beab      	bkpt	0x00ab
 80062d4:	4604      	mov	r4, r0
 80062d6:	2c01      	cmp	r4, #1
 80062d8:	d0f7      	beq.n	80062ca <_isatty+0x12>
 80062da:	f7fe fdd5 	bl	8004e88 <__errno>
 80062de:	2400      	movs	r4, #0
 80062e0:	4605      	mov	r5, r0
 80062e2:	2613      	movs	r6, #19
 80062e4:	4630      	mov	r0, r6
 80062e6:	4621      	mov	r1, r4
 80062e8:	beab      	bkpt	0x00ab
 80062ea:	4606      	mov	r6, r0
 80062ec:	602e      	str	r6, [r5, #0]
 80062ee:	e7ec      	b.n	80062ca <_isatty+0x12>

080062f0 <_init>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr

080062fc <_fini>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr
